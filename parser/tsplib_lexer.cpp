#line 2 "..\\..\\..\\cph-tsp\\parser\\parser/tsplib_lexer.cpp"

#line 4 "..\\..\\..\\cph-tsp\\parser\\parser/tsplib_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer TSPLIBFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *TSPLIBalloc (yy_size_t  );
void *TSPLIBrealloc (void *,yy_size_t  );
void TSPLIBfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 47
#define YY_END_OF_BUFFER 48
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[545] =
    {   0,
       46,   46,   46,   46,   46,   46,   48,   47,   39,   44,
       47,   47,    1,    4,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,    3,   47,   44,   39,
       47,   47,    1,    4,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,    0,    1,    2,    2,
        1,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   38,   38,    1,    2,    2,    1,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,

       38,   38,   38,    1,    0,    2,   46,   46,   29,   46,
       46,   46,   46,   46,   46,   45,   46,   46,   46,   46,
       28,   46,   46,   46,   46,   46,   46,   46,   46,   15,
       46,   46,   46,    1,   38,    2,   38,   38,   29,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       28,   38,   38,   38,   38,   38,   38,   38,   38,   15,
       38,   38,   38,    0,    2,   46,   16,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   17,   46,    5,
       46,   46,   46,   46,   46,   14,   46,   13,   46,   38,
        2,   38,   16,   38,   38,   38,   38,   38,   38,   38,

       38,   38,   38,   17,   38,    5,   38,   38,   38,   38,
       38,   14,   38,   13,   38,   18,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   30,   31,   18,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   30,
       31,   46,   46,   46,   46,   46,   46,   46,   23,   24,
       46,   46,   46,   46,   25,   26,   46,   46,   46,   46,
       46,   46,   46,   38,   38,   38,   38,   38,   38,   38,
       23,   24,   38,   38,   38,   38,   25,   26,   38,   38,

       38,   38,   38,   38,   38,   27,    6,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   32,
       46,   46,   46,   27,    6,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   32,   38,   38,
       38,   46,   46,   46,   46,   46,   34,   46,   33,   46,
       46,   46,   46,   46,   46,   46,   38,   38,   38,   38,
       38,   34,   38,   33,   38,   38,   38,   38,   38,   38,
       38,   46,   12,   46,   46,   46,   46,   19,   46,   46,
       10,   46,   46,   46,   46,   38,   12,   38,   38,   38,
       38,   19,   38,   38,   10,   38,   38,   38,   38,   46,

       46,   46,   46,   46,   46,   46,   43,   46,   46,   46,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   46,   46,   46,   46,   37,   46,   46,   46,    8,
       46,   38,   38,   38,   38,   37,   38,   38,   38,    8,
       38,   46,   46,   46,   46,   46,   46,   46,   46,   42,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   41,
       46,   46,   46,   46,   46,   46,   46,   46,    9,   38,
       38,   38,   38,   38,   38,   38,   38,   38,    9,   46,
       46,   46,   46,   46,   46,   46,   46,   38,   38,   38,
       38,   38,   38,   38,   38,   46,   46,   46,   46,   46,

       46,   46,    7,   38,   38,   38,   38,   38,   38,   38,
        7,   46,   46,   46,   46,   21,   20,   46,   38,   38,
       38,   38,   21,   20,   38,   40,   36,   46,   46,   46,
       38,   36,   38,   38,   38,   35,   46,   11,   35,   38,
       11,   22,   22,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    5,    1,    6,    7,    1,    8,    9,   10,
       11,    8,    8,    8,    8,    8,    8,   12,    1,    1,
        1,    1,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   14,   14,   22,   23,   24,   25,   26,
       14,   27,   28,   29,   30,   14,   31,   32,   33,   14,
        1,    1,    1,    1,   34,    1,   35,   14,   36,   37,

       38,   39,   40,   41,   42,   14,   14,   43,   44,   45,
       46,   47,   14,   48,   49,   50,   51,   14,   52,   53,
       54,   14,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[55] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    3,    3,    3,
        3,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[548] =
    {   0,
        0,    0,  688,  687,   54,    0,  696, 2506, 2506, 2506,
      102,  106,  111, 2506,  116,  685,  117,  118,  160,  119,
      121,  123,  140,  122,  207,  124, 2506,    0,    0,    0,
      170,  185,  261,    0,  273,  114,  183,  180,  308,  186,
      265,  133,  282,  199,  343,  264,  233,  279,  390,    0,
      289,  652,  181,  301,  177,  311,  303,  184,  302,  125,
      299,  342,  314,  227,  312,  346,  372,  243,  375,  366,
      309,  379,  368,  403,    0,  410,  432,  436,  472,  509,
      384,  436,  438,  472,  502,  507,  473,  514,  526,  539,
      548,  544,  552,  568,  576,  588,  594,  600,  510,  556,

      612,  616,  620,  441,  498, 2506,  407,  617,  607,  455,
      461,  384,  629,  646,  640,  605,  336,  608,  647,  658,
      602,  654,  371,  664,  667,  661,  668,  672,  679,  571,
      675,  678,  680,  462,  709,    0,  702,  703,  704,  706,
      718,  736,  719,  741,  754,  745,  753,  777,  778,  783,
      761,  796,  795,  813,  820,  825,  819,  847,  852,  828,
      861,  855,  870,  898,  904,  719,  567,  429,  772,  909,
      843,  681,  430,  247,  875,  490,  802,  576,  370,  537,
      771,  911,  912,  914,  866,  530,  916,  527,  920,  929,
      950,  915,  913,  945,  952,  951,  954,  978,  977, 1003,

      991,  990,  958, 1010, 1026, 1006, 1023, 1029, 1030, 1062,
     1048, 1042, 1055, 1068, 1084,  493,  134,  921,  941,  977,
     1055, 1094, 1093, 1099, 1092, 1104, 1112, 1089, 1107, 1113,
     1125, 1114, 1109, 1128, 1135, 1140,  492,  489, 1124, 1149,
     1146, 1133, 1152, 1169, 1174, 1178, 1194, 1193, 1198, 1211,
     1217, 1231, 1233, 1240, 1253, 1235, 1273, 1272, 1281, 1166,
     1275, 1150, 1282, 1258, 1298, 1031, 1307, 1162,  488,  478,
     1309, 1320, 1299, 1218,  454,  453, 1319, 1280, 1232, 1327,
      942, 1322, 1329, 1319, 1324, 1338, 1358, 1343, 1367, 1344,
     1366, 1370, 1382, 1396, 1394, 1409, 1408, 1410, 1416, 1424,

     1442, 1448, 1423, 1450, 1457,  452,  424, 1339, 1458, 1115,
     1383, 1473, 1474, 1477, 1478, 1480, 1486, 1494, 1498,  423,
     1501, 1488, 1505, 1499, 1500, 1517, 1523, 1524, 1516, 1541,
     1532, 1536, 1556, 1549, 1565, 1579, 1578, 1573, 1595, 1601,
     1608, 1597, 1564, 1510, 1625, 1615,  420, 1626,  419, 1633,
     1632, 1635, 1636, 1637, 1643, 1647, 1637, 1666, 1659, 1679,
     1660, 1678, 1686, 1683, 1703, 1698, 1711, 1728, 1725, 1737,
     1743, 1748,  415, 1763, 1332, 1738, 1752,  360, 1760, 1773,
      335, 1774, 1696, 1775, 1777, 1777, 1773, 1802, 1782, 1785,
     1815, 1789, 1819, 1814, 1821, 1827, 1847, 1854, 1856, 1867,

     1812, 1851, 1873, 1856, 1875, 1384,  257, 1645, 1877, 1894,
     1892, 1893, 1896, 1898, 1899, 1934, 1921, 1918, 1935, 1937,
     1960, 1963, 1981, 1952, 1896,  245, 1883, 1953, 1879,  244,
     1960, 1978, 1986, 2000, 1993, 2001, 2016, 2018, 2041, 2013,
     2015, 1971, 1989, 2047, 2057, 2032, 2042, 2064, 2065,  240,
     2055, 2058, 2075, 2084, 2060, 2100, 2097, 2103, 2116,  238,
     2092, 2120, 2121, 2137, 2129, 2134, 2150, 2113,  210, 2129,
     2142, 2144, 2149, 2168, 2169, 2172, 2181, 2201, 2184, 2157,
     2208, 2198, 2221, 2200, 2228, 2209, 2225, 2225, 2241, 2237,
     2253, 2269, 2261, 2265, 2283, 2226, 2230, 2285, 2289, 2297,

     2254, 2299,  200, 2298, 2303, 2307, 2315, 2323, 2335, 2337,
     2331, 2355, 2360, 2232, 2361,  197,  182, 2363, 2357, 2370,
     2377, 2379, 2373, 2382, 2399,  180,  175, 2397, 2409, 2407,
     2406, 2411, 2414, 2419, 2434,  167, 2443,  150, 2441, 2447,
     2443,  130, 2449, 2506,  124, 2499, 2502
    } ;

static yyconst flex_int16_t yy_def[548] =
    {   0,
      544,    1,    1,    1,  544,    5,  544,  544,  544,  544,
      544,  544,  545,  544,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  544,  546,  546,  546,
      546,  546,  547,  546,  547,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,  544,  544,  544,   49,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  546,  546,  546,  546,  546,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,  544,  544,  544,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  546,  546,  546,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,  544,  544,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  546,
      546,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,  545,

      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,  545,  545,  545,  545,  545,  545,  545,  545,  545,
       35,   35,   35,   35,   35,   35,   35,   35,   35,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,  545,
      545,  545,  545,  545,  545,  545,  545,   35,   35,   35,
       35,   35,   35,   35,   35,  545,  545,  545,  545,  545,

      545,  545,  545,   35,   35,   35,   35,   35,   35,   35,
       35,  545,  545,  545,  545,  545,  545,  545,   35,   35,
       35,   35,   35,   35,   35,  545,  545,  545,  545,  545,
       35,   35,   35,   35,   35,  545,  545,  545,   35,   35,
       35,  545,   35,    0,  544,  544,  544
    } ;

static yyconst flex_int16_t yy_nxt[2561] =
    {   0,
        8,    9,   10,    9,    8,   11,   12,   13,   13,   13,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   16,
       16,   16,   22,   23,   16,   16,   16,   24,   25,   16,
       16,   26,   16,   16,   15,   17,   18,   19,   20,   21,
       16,   16,   16,   22,   23,   16,   16,   16,   24,   25,
       16,   16,   26,   16,   28,    9,   29,   30,   28,   31,
       32,   33,   33,   33,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   36,   36,   36,   42,   43,   36,   36,
       36,   44,   45,   36,   36,   46,   36,   36,   35,   37,
       38,   39,   40,   41,   36,   36,   36,   42,   43,   36,

       36,   36,   44,   45,   36,   36,   46,   36,   47,   48,
       48,   48,   48,   49,   49,   49,   49,   50,   51,   51,
       51,   51,  544,  544,  544,  544,   52,  544,  544,  544,
      544,  544,   81,   55,   53,   65,  544,   63,   57,  117,
      544,   56,   81,  262,   54,   94,  544,   68,   62,   64,
       74,   81,   66,   81,   55,   53,  544,   65,   63,   57,
      117,   81,   56,   81,   67,   54,  544,   94,   68,   62,
       64,   74,   81,  544,   66,   58,   76,   77,   77,   77,
       77,  544,   81,  544,   59,   67,  544,  544,  544,   60,
      544,   61,   78,   78,   78,   78,   58,  110,   81,   84,

       86,   81,  115,  544,   81,   59,  544,   85,   81,  107,
       60,   81,   61,  544,   81,   91,  544,   81,  110,   81,
       84,   86,   81,  115,   97,   81,   69,   81,   85,   81,
      107,   70,   81,  544,   71,   81,   91,   72,   81,   73,
       49,   49,   49,   49,  544,   97,  544,   69,   81,  544,
      544,  544,   70,  544,  122,   71,  223,  224,   72,  127,
       73,   75,   75,  544,   75,   75,   75,   79,   80,   80,
       80,   80,   75,   75,   75,  122,   75,   75,   75,   75,
      127,   92,   81,   81,   75,   50,  104,  104,  104,  104,
      103,   82,   81,   93,   95,   50,   51,   51,   51,   51,

       81,   83,   92,   81,   81,  544,   96,  544,  544,  544,
       81,  103,   82,   81,   93,  544,   95,  544,  544,  116,
      544,   81,   83,   87,  118,  113,   81,   96,  108,  109,
      114,   81,   88,  111,  130,  112,   81,   89,  121,   90,
      116,  544,  544,  123,   87,  118,  113,   81,  544,  108,
      109,  114,  544,   88,  111,  130,  112,   81,   89,  121,
       90,   81,   98,  119,  123,  120,  544,   99,  124,  174,
      100,   81,  544,  101,  544,  102,  544,  544,  544,  229,
      230,  544,   81,   98,  119,  544,  120,  125,   99,  124,
      544,  100,   81,  132,  101,  129,  102,   49,   49,   49,

       49,  128,   81,  131,  179,  126,  105,  106,  125,  544,
      170,  106,   81,  544,  132,  133,  129,   78,   78,   78,
       78,  544,  128,   81,  131,  544,  544,  105,  106,  544,
      544,  170,  106,   81,  166,  544,  544,  133,   79,  134,
      134,  134,  134,   78,   78,   78,   78,   50,  104,  104,
      104,  104,  135,  136,   81,  166,   81,  136,  544,  544,
      544,  544,  217,  222,  137,  138,  139,  544,   79,  134,
      134,  134,  134,  135,  136,   81,  168,   81,  136,   78,
       78,   78,   78,  169,  544,  137,  138,  139,  135,  136,
       81,  145,  140,  136,  544,  544,  544,  168,  544,  544,

       81,   81,  164,  164,  169,  165,  165,  165,  165,  135,
      136,   81,  145,  140,  136,   79,   80,   80,   80,   80,
       81,   81,   81,  226,  141,   81,  142,   81,   81,  143,
       81,  146,   81,  544,  144,   81,  544,   81,   81,  159,
      147,   81,   81,  544,   81,  141,   81,  142,   81,   81,
      143,   81,  146,   81,   81,  144,   81,   81,   81,   81,
      159,  147,   81,   81,  148,   81,   81,   81,  151,  149,
       81,  150,   81,  544,   81,   81,   81,  544,   81,  152,
       81,  160,  544,   81,   81,  148,   81,   81,   81,  151,
      149,   81,  150,   81,   81,   81,   81,   81,  154,  153,

      152,   81,  160,  155,   81,   81,   81,   81,  544,  228,
      157,  544,   81,  544,  544,   81,   81,   81,   81,  154,
      153,  156,   81,  544,  155,   81,  158,   81,   81,  175,
       81,  157,  163,   81,   81,  544,  161,   81,   81,   81,
       81,  162,  167,   81,   81,  171,  544,  158,   81,   81,
      175,   81,  544,  544,  163,   81,  173,  161,  544,   81,
      544,   81,  162,  167,  544,   81,  171,  544,  176,   81,
      544,  172,  177,  544,  544,  182,  183,  173,  544,  178,
      180,  544,  184,  181,  544,  544,  544,  544,  185,  176,
      187,  544,  172,  177,  188,  544,  182,  183,   27,   27,

      178,  180,  221,  184,  181,  186,  544,  544,  544,  185,
      544,  187,  189,  190,  190,  188,  191,  191,  191,  191,
       81,   81,   81,  221,   81,  544,  186,  194,  193,  192,
       81,   81,   81,  189,   81,  197,   81,   81,  544,  544,
      195,   81,   81,   81,  216,   81,   81,   81,  194,  193,
      192,   81,   81,   81,   81,   81,  197,   81,   81,   81,
      544,  195,  196,   81,   81,  216,  198,   81,   81,   81,
      199,   81,   81,   81,  544,   81,  544,  544,  544,   81,
       81,   81,   81,  196,   81,   81,  200,  198,  218,   81,
       81,  199,   81,   81,   81,   81,   81,  203,  201,  202,

       81,   81,   81,   81,  231,   81,   81,  544,  544,  218,
       81,   81,  544,   81,   81,  544,   81,   81,  203,  201,
      202,  204,   81,   81,   81,  544,   81,   81,  205,  206,
      227,   81,   81,  210,   81,   81,  207,   81,   81,  208,
      209,   81,  204,   81,   81,   81,   81,   81,   81,  544,
      206,  227,   81,   81,  210,  544,   81,  207,   81,   81,
      208,  209,   81,  211,   81,   81,  220,   81,   81,   81,
       81,  214,  544,   81,   81,   81,  213,   81,  212,   81,
       81,  544,  235,   81,  211,  544,   81,  220,   81,   81,
      544,   81,  214,  544,   81,  225,   81,  213,   81,  212,

       81,   81,  215,  235,   81,  165,  165,  165,  165,   81,
       81,  165,  165,  165,  165,  544,  225,  544,  544,   81,
      544,  106,  544,  215,  219,  106,  544,  544,  237,  238,
      544,   81,  233,   81,  234,  232,  191,  191,  191,  191,
      239,   81,  106,   81,  263,  219,  106,  544,  544,  236,
      544,  544,   81,  233,   81,  234,  232,  191,  191,  191,
      191,  239,   81,   81,   81,  263,  242,  136,  241,   81,
       81,  136,   81,   81,  264,  321,   81,  243,  240,   81,
       81,  544,   81,  544,   81,  544,  250,  242,  136,  241,
       81,   81,  136,   81,   81,   81,   81,   81,  243,  244,

       81,   81,  544,   81,  265,   81,   81,  250,   81,   81,
      245,  248,  246,  247,  544,  544,   81,   81,   81,   81,
      244,   81,  544,  249,   81,  265,   81,   81,   81,   81,
       81,   81,  248,  544,   81,  252,  253,  544,   81,   81,
       81,   81,   81,  251,   81,   81,  544,   81,   81,   81,
      256,   81,   81,  255,   81,   81,  254,   81,   81,   81,
       81,  544,   81,  310,  258,   81,   81,  266,   81,   81,
       81,  256,   81,   81,  255,   81,   81,  544,   81,   81,
       81,   81,  257,   81,  310,  258,   81,   81,  259,  266,
       81,   81,  260,  261,   81,  544,   81,   81,  544,  544,

      544,   81,   81,  257,   81,  544,  271,   81,  269,  267,
      544,   81,   81,  544,  270,  544,  274,   81,  544,  544,
      544,  544,  275,   81,  268,  544,  272,  271,  276,  269,
      267,  544,  273,   81,  544,  270,  279,  274,  278,  277,
      280,  544,   81,  275,  544,  268,  544,  272,  344,  276,
      281,   81,   81,  273,  282,  283,  544,  279,  284,  278,
      277,   81,  280,   81,   81,  306,  286,   81,  544,  285,
       81,  281,   81,   81,   81,  282,  283,   81,  312,  287,
       81,  288,   81,  544,   81,   81,  306,   81,   81,  289,
      285,   81,   81,  291,   81,   81,   81,   81,   81,  312,

      287,   81,   81,  288,  290,   81,   81,  293,   81,  292,
      289,   81,   81,   81,  291,   81,   81,   81,   81,  544,
      294,   81,   81,   81,  544,  290,   81,   81,  293,   81,
      292,  295,   81,   81,  316,   81,  544,   81,  544,   81,
      544,  294,   81,   81,  296,   81,  297,   81,  298,   81,
       81,   81,  295,   81,  299,  316,   81,  319,   81,   81,
       81,   81,  301,   81,  544,  296,   81,  297,   81,  298,
       81,   81,   81,  308,   81,  299,  544,  300,  319,   81,
       81,   81,   81,  301,   81,  302,  544,  303,  544,   81,
       81,   81,   81,   81,  308,  304,  305,  544,  300,   81,

       81,   81,   81,   81,  544,  544,  318,  302,  303,   81,
      307,   81,   81,  544,   81,  544,  304,  305,  309,  311,
       81,   81,   81,  315,   81,  544,  544,  318,  544,  313,
       81,  307,  314,  544,  324,  544,  544,   81,  544,  309,
      544,  311,   81,  317,  315,  544,  322,   81,  320,  323,
      313,  544,  325,  326,  314,  324,   81,  544,   81,  342,
      330,   81,   81,   81,  317,  402,   81,  322,   81,  320,
      323,   81,   81,  325,  326,  328,   81,   81,  327,  329,
      342,  330,   81,   81,   81,   81,   81,   81,   81,  544,
      544,  544,   81,   81,   81,   81,  328,   81,   81,  327,

       81,  329,  331,  544,  544,   81,   81,   81,  332,   81,
       81,  345,   81,  544,   81,   81,   81,  428,  333,   81,
      544,   81,   81,  331,   81,  334,   81,   81,   81,  544,
      332,   81,  345,   81,   81,   81,   81,   81,   81,  333,
      335,   81,   81,   81,   81,   81,  334,   81,   81,   81,
      336,   81,   81,  544,  544,   81,  339,   81,   81,   81,
       81,  335,   81,   81,  544,   81,   81,  337,   81,  338,
       81,  336,   81,   81,  340,   81,   81,  341,   81,  544,
      544,   81,  343,  544,  544,   81,  544,   81,  337,   81,
      338,   81,  544,  346,  544,  340,   81,   81,  341,   81,

      544,  349,  347,  343,  544,  348,   81,  544,  350,  352,
      351,  544,  355,  544,  346,  354,  544,   81,   81,  353,
      544,  544,  349,  347,  544,  374,  348,   81,   81,  350,
      352,  351,  356,  355,   81,   81,  354,  357,   81,   81,
      353,   81,   81,  544,  360,   81,  374,  358,   81,   81,
       81,   81,   81,  356,   81,   81,   81,  359,  357,   81,
      362,  361,   81,   81,  363,  360,   81,   81,  358,   81,
      544,   81,   81,   81,   81,   81,  544,  365,  544,  364,
       81,  362,  361,   81,   81,  363,  544,  373,   81,  366,
       81,   81,  544,   81,  367,   81,   81,   81,  365,  368,

      364,   81,  544,  544,   81,   81,   81,   81,  373,  369,
      366,  544,   81,   81,   81,  367,  544,   81,   81,   81,
      368,  544,   81,   81,  372,  370,   81,   81,   81,   81,
      369,  544,  544,  376,   81,  371,   81,  375,  544,  544,
       81,  544,  544,  544,   81,  372,  370,   81,  382,  544,
       81,  544,  377,  544,  376,   81,  371,   81,  380,  375,
      378,  383,  381,  544,  386,   81,  379,  544,  544,  384,
      382,  429,  385,  377,  388,  544,   81,   81,  390,  380,
      544,  378,  383,  381,   81,  386,   81,   81,   81,  387,
      384,  389,  429,  385,   81,  388,   81,   81,   81,  390,

      544,   81,  544,  544,   81,   81,   81,   81,   81,   81,
      387,   81,  391,  389,   81,   81,   81,   81,   81,  544,
      408,   81,   81,  544,  394,   81,   81,   81,   81,   81,
      392,   81,   81,  391,  544,   81,  393,   81,  395,   81,
      396,  408,   81,   81,  544,  394,   81,   81,  544,  397,
       81,  392,   81,   81,  544,   81,   81,  403,  544,  395,
       81,   81,  396,  398,   81,   81,  544,   81,  399,  544,
      397,   81,  404,  400,   81,  401,   81,   81,  403,  544,
      544,  544,   81,  544,  398,  544,   81,  405,  406,  399,
      409,   81,   81,  404,  400,   81,  544,  401,  410,  544,

       81,   81,  411,   81,  414,   81,  407,   81,  405,  406,
       81,  409,   81,   81,  412,  413,   81,   81,  544,  410,
       81,   81,   81,  411,   81,  414,   81,  407,   81,  417,
       81,   81,   81,   81,   81,  415,  412,   81,   81,   81,
      423,   81,   81,   81,  544,   81,  416,   81,  544,   81,
      417,   81,  544,   81,   81,   81,  415,  544,   81,  418,
       81,  423,  544,   81,   81,   81,   81,  416,   81,  420,
       81,  419,   81,  544,   81,   81,   81,  421,  424,  544,
      418,  544,   81,  544,   81,  544,   81,  426,  422,  544,
      420,  427,  419,   81,  449,   81,   81,  446,  421,  424,

      544,  425,  544,   81,  430,   81,  431,  544,  426,  422,
       81,   81,  427,  432,   81,  449,   81,   81,  446,  544,
       81,  433,  425,  434,   81,  430,  435,   81,  431,  445,
      436,   81,   81,  544,  432,   81,   81,   81,   81,   81,
      544,   81,  433,  544,  434,   81,   81,  435,   81,   81,
      437,  436,   81,   81,  438,   81,  544,   81,  544,  544,
       81,  439,   81,   81,  440,   81,  544,   81,  444,  544,
       81,  437,  441,   81,   81,  442,   81,  544,   81,  544,
      447,  448,  439,   81,   81,  440,   81,  544,   81,  444,
      451,  544,  450,  443,  441,  544,   81,  442,  452,   81,

      544,  447,  448,  460,   81,  544,   81,  544,  544,   81,
      544,   81,  451,  450,   81,  443,  453,   81,   81,   81,
      452,   81,  461,  544,  460,   81,  454,   81,   81,   81,
      455,   81,   81,   81,   81,   81,   81,  453,  544,   81,
       81,   81,   81,   81,   81,  456,  457,  459,  544,   81,
       81,  455,   81,  544,   81,   81,  458,   81,  467,   81,
      466,  462,   81,  544,   81,   81,  456,  457,  459,   81,
      544,  544,  544,   81,  463,  544,   81,  458,   81,  467,
       81,  466,  462,   81,  464,  465,   81,  470,  476,  472,
       81,  471,  469,   81,   81,  463,  468,   81,  544,   81,

      544,  473,   81,   81,   81,  464,  465,   81,  470,  476,
      472,  474,  475,  469,   81,   81,  477,  468,   81,  544,
      480,   81,  473,   81,   81,   81,  544,  544,   81,  478,
      479,   81,  474,  475,   81,  544,   81,  477,  487,   81,
      544,  480,   81,  544,   81,  482,   81,   81,  481,   81,
      478,  479,   81,  483,  485,   81,  544,   81,  544,  487,
       81,  484,   81,  544,  486,   81,  482,   81,   81,  481,
      488,  544,  489,  490,  483,  485,  544,   81,   81,  544,
      544,   81,  484,   81,  491,  486,   81,   81,   81,  496,
       81,  488,  493,  489,  490,  494,   81,   81,   81,   81,

       81,  492,   81,  544,  544,  491,  544,   81,   81,   81,
      496,   81,   81,  493,  544,  544,  494,   81,   81,   81,
       81,   81,  492,   81,  498,  500,  495,  544,  497,   81,
       81,  544,  544,   81,  544,  499,  544,  502,  544,  544,
       81,  503,  544,   81,  528,  498,  500,  495,  544,  497,
       81,  512,  501,   81,  513,   81,  499,  504,  502,   81,
      544,  505,  503,  506,   81,   81,  528,  507,  544,   81,
      544,   81,  512,  501,   81,  513,   81,  517,  504,   81,
       81,   81,  505,   81,  506,  509,   81,   81,  507,   81,
       81,  544,   81,  510,  508,  544,  544,   81,  517,  511,

       81,   81,   81,  544,   81,  544,  509,  514,   81,  544,
       81,   81,  544,  516,  510,  508,   81,  515,   81,  518,
      511,   81,   81,  519,  544,   81,   81,  520,  514,  521,
      544,   81,   81,   81,  516,   81,  544,   81,  515,  523,
      518,   81,   81,  522,  519,  544,   81,   81,  520,   81,
      521,   81,   81,   81,   81,   81,   81,  525,  524,   81,
      523,  544,   81,   81,  522,   81,  544,  544,  544,  544,
       81,  526,   81,  531,   81,   81,   81,  544,  525,  524,
       81,  529,  544,  527,   81,   81,   81,  530,   81,  533,
      544,   81,  526,  532,  531,   81,   81,   81,   81,  534,

       81,   81,  529,  544,  527,   81,   81,   81,  530,   81,
       81,  533,   81,  544,  532,  544,   81,   81,   81,   81,
      534,   81,   81,  535,   81,  536,   81,   81,   81,   81,
      538,   81,   81,  537,   81,  544,  544,   81,   81,   81,
      544,  544,  539,  540,  535,   81,  536,   81,   81,  544,
       81,  538,   81,   81,  537,   81,  544,  541,   81,   81,
       81,   81,   81,  539,  540,   81,  542,   81,   81,   81,
      543,   81,  544,   81,  544,   81,  544,   81,  541,  544,
       81,  544,   81,   81,  544,  544,   81,  542,   81,  544,
       81,  543,   81,  544,  544,  544,   81,  544,   81,   75,

      544,   75,   81,  544,   81,    7,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544
    } ;

static yyconst flex_int16_t yy_chk[2561] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,   11,   11,
       11,   11,   11,   12,   12,   12,   12,   13,   13,   13,
       13,   13,   15,   17,   18,   20,  545,   21,   24,   22,
       26,   60,   36,   17,   15,   22,  542,   21,   18,   60,
      217,   17,   36,  217,   15,   42,   23,   24,   20,   21,
       26,   42,   23,   36,   17,   15,  538,   22,   21,   18,
       60,   42,   17,   36,   23,   15,   19,   42,   24,   20,
       21,   26,   42,  536,   23,   19,   31,   31,   31,   31,
       31,  527,   42,   55,   19,   23,  526,   53,  517,   19,
       58,   19,   32,   32,   32,   32,   19,   55,   38,   37,

       38,   37,   58,  516,   40,   19,  503,   37,   38,   53,
       19,   37,   19,   25,   40,   40,  469,   44,   55,   38,
       37,   38,   37,   58,   44,   40,   25,   44,   37,   38,
       53,   25,   37,   64,   25,   40,   40,   25,   44,   25,
       47,   47,   47,   47,  460,   44,  450,   25,   44,   68,
      430,  426,   25,  174,   64,   25,  174,  174,   25,   68,
       25,   33,   33,  407,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   35,   35,   64,   35,   35,   35,   35,
       68,   41,   46,   41,   35,   48,   48,   48,   48,   48,
       46,   35,   46,   41,   43,   51,   51,   51,   51,   51,

       43,   35,   41,   46,   41,   61,   43,   54,   59,   57,
       43,   46,   35,   46,   41,   71,   43,   56,   65,   59,
       63,   43,   35,   39,   61,   57,   39,   43,   54,   54,
       57,   43,   39,   56,   71,   56,   39,   39,   63,   39,
       59,  381,  117,   65,   39,   61,   57,   39,   62,   54,
       54,   57,   66,   39,   56,   71,   56,   39,   39,   63,
       39,   45,   45,   62,   65,   62,  378,   45,   66,  117,
       45,   45,   70,   45,   73,   45,  179,  123,   67,  179,
      179,   69,   45,   45,   62,   72,   62,   67,   45,   66,
      112,   45,   45,   73,   45,   70,   45,   49,   49,   49,

       49,   69,   81,   72,  123,   67,   49,   49,   67,   74,
      112,   49,   81,  107,   73,   74,   70,   76,   76,   76,
       76,  373,   69,   81,   72,  349,  347,   49,   49,  320,
      307,  112,   49,   81,  107,  168,  173,   74,   77,   77,
       77,   77,   77,   78,   78,   78,   78,  104,  104,  104,
      104,  104,   78,   78,   82,  107,   83,   78,  306,  276,
      275,  110,  168,  173,   82,   83,   83,  111,  134,  134,
      134,  134,  134,   78,   78,   82,  110,   83,   78,   79,
       79,   79,   79,  111,  270,   82,   83,   83,   79,   79,
       84,   87,   84,   79,  269,  238,  176,  110,  237,  216,

       84,   87,  105,  105,  111,  105,  105,  105,  105,   79,
       79,   84,   87,   84,   79,   80,   80,   80,   80,   80,
       85,   84,   87,  176,   85,   86,   85,   80,   99,   86,
       85,   88,   88,  188,   86,   86,  186,   80,   99,   99,
       89,   85,   88,  180,   89,   85,   86,   85,   80,   99,
       86,   85,   88,   88,   89,   86,   86,   90,   80,   99,
       99,   89,   92,   88,   90,   89,   91,   90,   92,   91,
       93,   91,   92,  167,  100,   89,   91,  130,   90,   93,
       93,  100,  178,   92,  100,   90,   94,   91,   90,   92,
       91,   93,   91,   92,   95,  100,   94,   91,   95,   94,

       93,   93,  100,   96,   95,  100,   96,   94,  121,  178,
       97,  116,   97,  109,  118,   95,   96,   94,   98,   95,
       94,   96,   97,  108,   96,   95,   98,   96,   98,  118,
      101,   97,  103,   97,  102,  113,  101,   96,  103,   98,
      101,  102,  108,   97,  102,  113,  115,   98,  103,   98,
      118,  101,  114,  119,  103,  102,  115,  101,   52,  103,
      122,  101,  102,  108,  120,  102,  113,  126,  119,  103,
      124,  114,  120,  125,  127,  126,  126,  115,  128,  122,
      124,  131,  127,  125,  132,  129,  133,  172,  128,  119,
      131,   16,  114,  120,  132,    7,  126,  126,    4,    3,

      122,  124,  172,  127,  125,  129,    0,    0,    0,  128,
        0,  131,  133,  135,  135,  132,  135,  135,  135,  135,
      137,  138,  139,  172,  140,  166,  129,  140,  138,  137,
      137,  138,  139,  133,  140,  143,  141,  143,    0,    0,
      141,  137,  138,  139,  166,  140,  141,  143,  140,  138,
      137,  137,  138,  139,  142,  140,  143,  141,  143,  144,
        0,  141,  142,  146,  142,  166,  144,  141,  143,  144,
      145,  147,  145,  146,    0,  142,    0,  181,  169,  151,
      144,  147,  145,  142,  146,  142,  147,  144,  169,  151,
      144,  145,  147,  145,  146,  148,  149,  150,  148,  149,

      151,  150,  147,  145,  181,  148,  149,    0,  177,  169,
      151,  150,    0,  153,  152,    0,  148,  149,  150,  148,
      149,  152,  150,  153,  152,    0,  148,  149,  153,  154,
      177,  154,  150,  157,  153,  152,  155,  157,  155,  156,
      156,  154,  152,  156,  153,  152,  160,  157,  155,  171,
      154,  177,  154,  156,  157,    0,  160,  155,  157,  155,
      156,  156,  154,  158,  156,  158,  171,  160,  157,  155,
      159,  162,  185,  162,  156,  158,  161,  160,  159,  161,
      159,  175,  185,  162,  158,    0,  158,  171,  163,  161,
        0,  159,  162,    0,  162,  175,  158,  161,  163,  159,

      161,  159,  163,  185,  162,  164,  164,  164,  164,  163,
      161,  165,  165,  165,  165,  170,  175,  182,  183,  163,
      184,  165,  187,  163,  170,  165,  189,  218,  189,  189,
        0,  193,  183,  192,  184,  182,  190,  190,  190,  190,
      192,  193,  165,  192,  218,  170,  165,  219,  281,  187,
        0,    0,  193,  183,  192,  184,  182,  191,  191,  191,
      191,  192,  193,  194,  192,  218,  196,  191,  195,  196,
      195,  191,  197,  194,  219,  281,  203,  197,  194,  196,
      195,    0,  197,  220,  194,    0,  203,  196,  191,  195,
      196,  195,  191,  197,  194,  199,  198,  203,  197,  198,

      196,  195,    0,  197,  220,  199,  198,  203,  202,  201,
      199,  201,  200,  200,    0,    0,  199,  198,  202,  201,
      198,  200,    0,  202,  206,  220,  199,  198,  204,  202,
      201,  200,  201,    0,  206,  205,  205,  266,  204,  202,
      201,  207,  200,  204,  205,  206,    0,  208,  209,  204,
      209,  207,  200,  208,  205,  206,  207,  208,  209,  204,
      212,  221,  207,  266,  211,  205,  211,  221,  208,  209,
      212,  209,  207,  213,  208,  205,  211,    0,  208,  209,
      210,  212,  210,  213,  266,  211,  214,  211,  213,  221,
      210,  212,  215,  215,  213,  228,  214,  211,  225,  223,

      222,  210,  215,  210,  213,  224,  225,  214,  223,  222,
      226,  210,  215,  229,  224,  233,  228,  214,  227,  230,
      232,  310,  229,  215,  222,    0,  226,  225,  230,  223,
      222,  231,  227,  215,  234,  224,  233,  228,  232,  231,
      234,  235,  239,  229,    0,  222,  236,  226,  310,  230,
      235,  242,  239,  227,  236,  236,  262,  233,  240,  232,
      231,  242,  234,  239,  241,  262,  242,  240,  268,  241,
      243,  235,  242,  239,  241,  236,  236,  240,  268,  243,
      243,  244,  242,    0,  260,  241,  262,  244,  240,  245,
      241,  243,  245,  246,  260,  241,  246,  244,  240,  268,

      243,  243,  245,  244,  245,  260,  246,  248,  244,  247,
      245,  248,  247,  245,  246,  260,  249,  246,  244,    0,
      249,  248,  247,  245,  274,  245,  249,  246,  248,  250,
      247,  250,  248,  247,  274,  251,    0,  249,  279,  250,
        0,  249,  248,  247,  251,  251,  252,  249,  253,  252,
      250,  253,  250,  256,  254,  274,  251,  279,  254,  252,
      250,  253,  256,  256,  264,  251,  251,  252,  254,  253,
      252,  255,  253,  264,  256,  254,    0,  255,  279,  254,
      252,  255,  253,  256,  256,  257,  278,  258,  263,  254,
      258,  257,  255,  261,  264,  259,  259,    0,  255,  259,

      258,  257,  255,  261,  265,  273,  278,  257,  258,  259,
      263,  258,  257,  267,  261,  271,  259,  259,  265,  267,
      259,  258,  257,  273,  261,  277,  272,  278,  282,  271,
      259,  263,  272,  280,  284,  283,    0,  284,  375,  265,
        0,  267,  285,  277,  273,  308,  282,  284,  280,  283,
      271,    0,  285,  286,  272,  284,  286,    0,  284,  308,
      290,  288,  290,  285,  277,  375,  286,  282,  284,  280,
      283,  288,  290,  285,  286,  288,  287,  286,  287,  289,
      308,  290,  288,  290,  291,  289,  287,  286,  292,  311,
      406,    0,  288,  290,  291,  289,  288,  287,  292,  287,

      293,  289,  293,    0,    0,  291,  289,  287,  294,  292,
      293,  311,  295,    0,  294,  291,  289,  406,  295,  292,
        0,  293,  295,  293,  294,  296,  297,  296,  298,    0,
      294,  293,  311,  295,  299,  294,  297,  296,  298,  295,
      299,  303,  300,  295,  299,  294,  296,  297,  296,  298,
      300,  303,  300,    0,    0,  299,  303,  297,  296,  298,
      301,  299,  303,  300,  309,  299,  302,  301,  304,  302,
      301,  300,  303,  300,  304,  305,  302,  305,  304,  312,
      313,  301,  309,  314,  315,  305,  316,  302,  301,  304,
      302,  301,  317,  312,  322,  304,  305,  302,  305,  304,

      318,  315,  313,  309,  319,  314,  305,  321,  316,  318,
      317,  323,  322,    0,  312,  321,  344,  324,  325,  319,
        0,    0,  315,  313,    0,  344,  314,  324,  325,  316,
      318,  317,  323,  322,  329,  326,  321,  326,  324,  325,
      319,  327,  328,    0,  329,  326,  344,  327,  324,  325,
      331,  327,  328,  323,  332,  329,  326,  328,  326,  330,
      331,  330,  327,  328,  332,  329,  326,  334,  327,  330,
      343,  331,  327,  328,  333,  332,    0,  334,    0,  333,
      330,  331,  330,  335,  333,  332,    0,  343,  334,  335,
      330,  338,    0,  335,  336,  333,  337,  336,  334,  337,

      333,  338,    0,  342,  335,  333,  337,  336,  343,  339,
      335,    0,  338,  339,  335,  336,    0,  337,  336,  340,
      337,  346,  338,  339,  342,  340,  341,  337,  336,  340,
      339,  345,  348,  346,  339,  341,  341,  345,  351,  350,
      340,  352,  353,  354,  339,  342,  340,  341,  353,  355,
      340,  408,  348,  356,  346,  357,  341,  341,  351,  345,
      350,  354,  352,    0,  357,  357,  350,    0,    0,  355,
      353,  408,  356,  348,  359,    0,  357,  359,  361,  351,
        0,  350,  354,  352,  358,  357,  357,  359,  361,  358,
      355,  360,  408,  356,  358,  359,  362,  360,  359,  361,

        0,  364,  383,    0,  363,  358,  362,  360,  359,  361,
      358,  364,  363,  360,  363,  358,  366,  362,  360,    0,
      383,  365,  364,    0,  366,  363,  366,  362,  360,  367,
      365,  365,  364,  363,    0,  363,  365,  366,  367,  367,
      368,  383,  365,  369,  376,  366,  368,  366,    0,  369,
      367,  365,  365,  369,  372,  370,  368,  376,  377,  367,
      367,  371,  368,  370,  369,  370,  379,  368,  371,  374,
      369,  371,  377,  372,  369,  374,  370,  368,  376,  380,
      382,  384,  371,  385,  370,    0,  370,  379,  380,  371,
      384,  387,  371,  377,  372,  386,    0,  374,  385,    0,

      389,  387,  386,  390,  390,  386,  382,  392,  379,  380,
      389,  384,  387,  390,  388,  389,  386,  392,  401,  385,
      388,  389,  387,  386,  390,  390,  386,  382,  392,  394,
      388,  389,  394,  391,  390,  391,  388,  393,  392,  395,
      401,  388,  394,  391,    0,  396,  393,  393,    0,  395,
      394,  388,    0,  394,  391,  396,  391,  402,  393,  396,
      395,  401,  404,  394,  391,  397,  396,  393,  393,  398,
      395,  397,  398,  400,  399,  397,  396,  399,  402,  403,
      396,  405,  398,  409,  399,  429,  397,  404,  400,  427,
      398,  405,  397,  398,  429,  399,  397,  427,  399,  402,

      410,  403,  425,  398,  409,  399,  410,    0,  404,  400,
      411,  412,  405,  411,  413,  429,  414,  415,  427,    0,
      411,  412,  403,  413,  413,  409,  414,  415,  410,  425,
      415,  411,  412,    0,  411,  413,  418,  414,  415,  417,
        0,  411,  412,    0,  413,  413,  418,  414,  415,  417,
      416,  415,  416,  419,  417,  420,    0,  418,  424,  428,
      417,  419,  416,  419,  420,  420,  431,  418,  424,  422,
      417,  416,  421,  416,  419,  422,  420,  442,  421,    0,
      428,  428,  419,  416,  419,  420,  420,  423,  421,  424,
      432,    0,  431,  423,  421,  443,  432,  422,  433,  421,

        0,  428,  428,  442,  433,    0,  432,    0,    0,  421,
        0,  435,  432,  431,  433,  423,  434,  432,  434,  436,
      433,  435,  443,    0,  442,  433,  435,  432,  434,  436,
      437,  440,  435,  441,  437,  433,  438,  434,  446,  434,
      436,  440,  435,  441,  437,  438,  438,  441,  447,  434,
      436,  437,  440,  444,  441,  437,  439,  438,  447,  439,
      446,  444,  440,  445,  441,  437,  438,  438,  441,  439,
      448,  449,    0,  451,  445,    0,  452,  439,  455,  447,
      439,  446,  444,  451,  445,  445,  452,  451,  455,  453,
      439,  452,  449,  453,  451,  445,  448,  452,  461,  455,

        0,  454,  454,  453,  451,  445,  445,  452,  451,  455,
      453,  454,  454,  449,  453,  457,  456,  448,  456,  468,
      461,  458,  454,  454,  453,  457,  462,  463,  456,  457,
      458,  458,  454,  454,  459,  465,  457,  456,  468,  456,
      466,  461,  458,  464,  459,  463,  457,  470,  462,  456,
      457,  458,  458,  464,  466,  459,  467,  470,    0,  468,
      471,  465,  472,  480,  467,  459,  463,  473,  470,  462,
      471,    0,  472,  473,  464,  466,    0,  473,  470,    0,
        0,  471,  465,  472,  474,  467,  474,  475,  473,  480,
      476,  471,  476,  472,  473,  477,  474,  475,  473,  477,

      476,  475,  479,    0,  482,  474,  484,  474,  475,  477,
      480,  476,  479,  476,  481,  486,  477,  474,  475,  478,
      477,  476,  475,  479,  482,  484,  478,  483,  481,  478,
      477,  487,  496,  479,  485,  483,  497,  486,  514,    0,
      478,  487,    0,  488,  514,  482,  484,  478,    0,  481,
      478,  496,  485,  488,  497,  490,  483,  488,  486,  489,
      501,  489,  487,  490,  488,  490,  514,  491,    0,  489,
        0,  491,  496,  485,  488,  497,  490,  501,  488,  493,
      489,  491,  489,  494,  490,  493,  490,  492,  491,  493,
      489,  498,  491,  494,  492,  499,    0,  492,  501,  495,

      493,  495,  491,  500,  494,  502,  493,  498,  492,    0,
      493,  495,    0,  500,  494,  492,  504,  499,  492,  502,
      495,  505,  495,  504,    0,  506,  504,  505,  498,  506,
        0,  505,  495,  507,  500,  506,    0,  504,  499,  508,
      502,  508,  505,  507,  504,    0,  506,  504,  505,  511,
      506,  508,  505,  509,  507,  510,  506,  510,  509,  511,
      508,  512,  508,  509,  507,  510,  513,  515,    0,  518,
      511,  512,  508,  519,  509,  519,  510,    0,  510,  509,
      511,  515,    0,  513,  509,  519,  510,  518,  520,  521,
        0,  523,  512,  520,  519,  521,  519,  522,  520,  522,

      524,  523,  515,  528,  513,  521,  519,  522,  518,  520,
      524,  521,  523,  530,  520,  529,  521,  525,  522,  520,
      522,  524,  523,  525,  531,  528,  521,  525,  522,  532,
      530,  524,  533,  529,  531,    0,    0,  534,  525,  532,
        0,    0,  533,  534,  525,  531,  528,  534,  525,  537,
      532,  530,  535,  533,  529,  531,    0,  535,  534,  539,
      532,  541,  535,  533,  534,  540,  537,  543,  534,  539,
      540,  541,    0,  535,    0,  540,    0,  543,  535,    0,
      539,    0,  541,  535,    0,    0,  540,  537,  543,    0,
      539,  540,  541,    0,    0,    0,  540,    0,  543,  546,

        0,  546,  547,    0,  547,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544
    } ;

static yyconst flex_int16_t yy_rule_linenum[47] =
    {   0,
      164,  169,  173,  178,  185,  190,  195,  197,  202,  207,
      212,  214,  216,  218,  223,  228,  233,  238,  243,  247,
      251,  255,  259,  263,  268,  272,  276,  280,  284,  288,
      292,  296,  301,  305,  310,  314,  317,  323,  334,  341,
      344,  348,  352,  358,  363,  367
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
/* $Id: scanner.ll 44 2008-10-23 09:03:19Z tb $ -*- mode: c++ -*- */
/** \file scanner.ll Define the TSPLIB Flex lexical scanner */
#line 5 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"

#include <string>
#include <iostream>

#include "tsplib_lexer.h"

/* import the parser's token type into a local typedef */
typedef TSPLIB::Parser::token token;
typedef TSPLIB::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H


/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "TSPLIBFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* float exponent */
/* literal keywords */
/* normal TSP types, as defined in TSPLIB */
/* generalized TSP extension, according to the rules specified in:
 * http://www.cs.rhul.ac.uk/home/zvero/GTSPLIB/ and
 * http://www.cs.nott.ac.uk/~dxk/gtsp.html
 */
/*
 * Other attributes
 */
/*
 * Edge weight types
 */
/*
 * Edge weight formats
 */
/*
 * Edge data formats
 */
/*
 * Node coordinates types
 */
/*
 * Display data types
 */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 150 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 1291 "..\\..\\..\\cph-tsp\\parser\\parser/tsplib_lexer.cpp"

#define INITIAL 0
#define EXPECT_REST_OF_LINE_STRING 1
#define REST_OF_LINE_STRING 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 153 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"



 /* code to place at the beginning of yylex() */

    // reset location
    yylloc->step();


 /*** BEGIN TSPLIB - Change the TSPLIB lexer rules below ***/

#line 1462 "..\\..\\..\\cph-tsp\\parser\\parser/tsplib_lexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 545 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 544 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 47 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 47 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 48 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 164 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->integerVal = atoi(yytext);
    return token::INTEGER;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 169 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->doubleVal = atof(yytext);
    return token::DOUBLE;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 173 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    BEGIN(REST_OF_LINE_STRING);
    return token::KEY_VALUE_SEPARATOR;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 178 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    #ifdef FLEX_SCANNER_DEBUG
        std::cout << "sep" << std::endl;
    #endif
    return token::KEY_VALUE_SEPARATOR;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 185 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    BEGIN(EXPECT_REST_OF_LINE_STRING);
    return token::NAME;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 190 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    BEGIN(EXPECT_REST_OF_LINE_STRING);
    return token::COMMENT;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 195 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{ return token::NODE_COORD_TYPE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 197 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->nodeCoordType = TSP::NODE_COORD_TYPE::TWO_D;
    return token::NODE_COORD_TYPE_LITERAL;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 202 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->nodeCoordType = TSP::NODE_COORD_TYPE::THREE_D;
    return token::NODE_COORD_TYPE_LITERAL;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 207 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->nodeCoordType = TSP::NODE_COORD_TYPE::NONE;
    return token::NODE_COORD_TYPE_LITERAL;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 212 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{ return token::NODE_COORD_SECTION; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 214 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{ return token::DIMENSION; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 216 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{ return token::TYPE; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 218 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->tspType = TSP::TYPE::TOUR;
    return token::TSPTYPE;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 223 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->tspType = TSP::TYPE::TSP;
    return token::TSPTYPE;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 228 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->tspType = TSP::TYPE::ATSP;
    return token::TSPTYPE;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 233 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->tspType = TSP::TYPE::GTSP;
    return token::TSPTYPE;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 238 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->tspType = TSP::TYPE::AGTSP;
    return token::TSPTYPE;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 243 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    return token::GTSP_SETS;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 247 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    return token::GTSP_SET_SECTION;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 251 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    return token::EDGE_WEIGHT_TYPE;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 255 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    return token::EDGE_WEIGHT_SECTION;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 259 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::EUC_2D;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 263 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::EUC_3D;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 268 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::MAX_2D;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 272 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::MAX_3D;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 276 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::CEIL_2D;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 280 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::GEO;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 284 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::ATT;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 288 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::XRAY1;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 292 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::XRAY2;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 296 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::SPECIAL;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 301 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->edgeWeightFormat = TSP::EDGE_WEIGHT_FORMAT::FUNCTION;
    return token::EDGE_WEIGHT_FORMAT_LITERAL;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 305 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::EXPLICIT;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 310 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    return token::EDGE_WEIGHT_FORMAT;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 314 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    return token::EDGE_DATA_SECTION;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 317 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->edgeWeightFormat = TSP::EDGE_WEIGHT_FORMAT::FULL_MATRIX;
    return token::EDGE_WEIGHT_FORMAT_LITERAL;
}
	YY_BREAK
/* read the rest of the line as a single string */
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 323 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    #ifdef FLEX_SCANNER_DEBUG
        std::cout << "rest_of_line: " << *(yylval->stringVal) << std::endl;
    #endif

    BEGIN(INITIAL);
    return token::STRING;
}
	YY_BREAK
/* gobble up white-spaces */
case 39:
YY_RULE_SETUP
#line 334 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
   #ifdef FLEX_SCANNER_DEBUG
    std::cout << "ws" << yytext << std::endl;
   #endif
   yylloc->step();
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 341 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    return token::DISPLAY_DATA_TYPE;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 344 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->displayDataType = TSP::DISPLAY_DATA_TYPE::COORD_DISPLAY;
    return token::DISPLAY_DATA_TYPE_LITERAL;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 348 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->displayDataType = TSP::DISPLAY_DATA_TYPE::TWOD_DISPLAY;
    return token::DISPLAY_DATA_TYPE_LITERAL;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 352 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->displayDataType = TSP::DISPLAY_DATA_TYPE::NO_DISPLAY;
    return token::DISPLAY_DATA_TYPE_LITERAL;
}
	YY_BREAK
/* gobble up end-of-lines */
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 358 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylloc->lines(yyleng); yylloc->step();
    return token::EOL;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 363 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    return token::END;
}
	YY_BREAK
/* pass all other characters to bison */
case 46:
YY_RULE_SETUP
#line 367 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    #ifdef FLEX_SCANNER_DEBUG
       std::cout << "UNMATCHED INPUT! " << yytext << std::endl;
    #endif
    std::stringstream err;
    err << "syntax error, unmatched input token: " << *yylval->stringVal;
    driver.error(err.str());
    return token::UNMATCHED_TOKEN;
}
	YY_BREAK
/*** END TSPLIB - Change the TSPLIB lexer rules above ***/
case 47:
YY_RULE_SETUP
#line 380 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"
ECHO;
	YY_BREAK
#line 1946 "..\\..\\..\\cph-tsp\\parser\\parser/tsplib_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(EXPECT_REST_OF_LINE_STRING):
case YY_STATE_EOF(REST_OF_LINE_STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	TSPLIBfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	TSPLIBfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					TSPLIBrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) TSPLIBrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 545 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 545 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 544);

		return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) TSPLIBalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) TSPLIBalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		TSPLIBfree((void *) b->yy_ch_buf  );

	TSPLIBfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)TSPLIBalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)TSPLIBrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) TSPLIBalloc(new_size  );

		else
			(yy_start_stack) = (int *) TSPLIBrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *TSPLIBalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *TSPLIBrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void TSPLIBfree (void * ptr )
{
	free( (char *) ptr );	/* see TSPLIBrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 379 "..\\..\\..\\cph-tsp\\parser\\parser\\tsplib.l"



namespace TSPLIB {

Scanner::Scanner(std::istream* in,
         std::ostream* out)
    : TSPLIBFlexLexer(in, out)
{
}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

}

/* This implementation of TSPLIBFlexLexer::yylex() is required to fill the
 * vtable of the class TSPLIBFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int TSPLIBFlexLexer::yylex()
{
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int TSPLIBFlexLexer::yywrap()
{
    return 1;
}

