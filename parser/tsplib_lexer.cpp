#line 2 "..\\..\\tsplib-parser\\parser/tsplib_lexer.cpp"

#line 4 "..\\..\\tsplib-parser\\parser/tsplib_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer TSPLIBFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *TSPLIBalloc (yy_size_t  );
void *TSPLIBrealloc (void *,yy_size_t  );
void TSPLIBfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 55
#define YY_END_OF_BUFFER 56
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[637] =
    {   0,
       54,   54,   54,   54,   54,   54,   56,   55,   47,   52,
       55,   55,    1,    4,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,    3,   55,
       52,   47,   55,   55,    1,    4,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
        0,    1,    2,    2,    1,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       46,   46,    1,    2,    2,    1,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,    1,    0,    2,   54,   54,   29,   54,   54,   54,
       54,   54,   54,   53,   54,   54,   54,   54,   28,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   15,   54,
       54,   54,   54,    1,   46,    2,   46,   46,   29,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       28,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       15,   46,   46,   46,   46,    0,    2,   54,   16,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   17,
       54,   54,    5,   54,   54,   54,   54,   54,   14,   54,

       13,   54,   54,   46,    2,   46,   16,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   17,   46,   46,
        5,   46,   46,   46,   46,   46,   14,   46,   13,   46,
       46,   18,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   30,   31,   18,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   30,
       31,   54,   54,   54,   54,   54,   54,   54,   23,   24,
       54,   54,   54,   54,   54,   25,   26,   54,   54,   54,

       54,   54,   54,   54,   54,   46,   46,   46,   46,   46,
       46,   46,   23,   24,   46,   46,   46,   46,   46,   25,
       26,   46,   46,   46,   46,   46,   46,   46,   46,   27,
        6,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   32,   54,   54,   54,
       54,   54,   54,   27,    6,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       32,   46,   46,   46,   46,   46,   46,   54,   54,   54,
       54,   54,   33,   54,   36,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   46,   46,

       46,   46,   46,   33,   46,   36,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   54,
       12,   54,   54,   54,   54,   19,   54,   41,   54,   39,
       54,   10,   54,   54,   54,   54,   40,   54,   38,   46,
       12,   46,   46,   46,   46,   19,   46,   41,   46,   39,
       46,   10,   46,   46,   46,   46,   40,   46,   38,   54,
       54,   54,   54,   54,   54,   54,   54,   51,   54,   54,
       54,   54,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   54,   54,   54,   54,   37,
       54,   54,   54,   54,    8,   54,   54,   46,   46,   46,

       46,   37,   46,   46,   46,   46,    8,   46,   46,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   50,
       54,   54,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   49,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,    9,   54,   54,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
        9,   46,   46,   54,   54,   54,   54,   54,   54,   45,
       43,   54,   54,   44,   42,   46,   46,   46,   46,   46,
       46,   45,   43,   46,   46,   44,   42,   54,   54,   54,
       54,   54,   54,   54,    7,   46,   46,   46,   46,   46,

       46,   46,    7,   54,   54,   54,   54,   21,   20,   54,
       46,   46,   46,   46,   21,   20,   46,   48,   35,   54,
       54,   54,   46,   35,   46,   46,   46,   34,   54,   11,
       34,   46,   11,   22,   22,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    5,    1,    6,    7,    1,    8,    9,   10,
       11,    8,    8,    8,    8,    8,    8,   12,    1,    1,
        1,    1,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   14,   14,   22,   23,   24,   25,   26,
       14,   27,   28,   29,   30,   14,   31,   32,   33,   14,
        1,    1,    1,    1,   34,    1,   35,   14,   36,   37,

       38,   39,   40,   41,   42,   14,   14,   43,   44,   45,
       46,   47,   14,   48,   49,   50,   51,   14,   52,   53,
       54,   14,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[55] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    3,    3,    3,
        3,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[640] =
    {   0,
        0,    0,  748,  742,   54,    0,  752, 2937, 2937, 2937,
      102,  106,  111, 2937,  116,  744,  117,  118,  160,  119,
      121,  122,  123,  166,  125,  207,  136,  126, 2937,    0,
        0,    0,  208,  178,  261,    0,  273,  125,  204,  201,
      308,  207,  265,  264,  282,  306,  205,  343,  310,  280,
      185,  370,  390,    0,  395,  743,  175,  336,  157,  344,
      387,  162,  221,  311,  274,  389,  309,  342,  335,  145,
      402,  407,  409,  410,  154,  412,  414,  417,  423,  438,
        0,  199,  445,  466,  502,  539,  421,  449,  453,  466,
      513,  532,  450,  478,  537,  545,  564,  565,  572,  577,

      584,  607,  604,  623,  616,  620,  629,  643,  648,  656,
      665,  700,  708, 2937,  473,  507,  739,  269,  555,  415,
      527,  639,  674,  697,  428,  680,  713,  450,  692,  714,
      715,  460,  717,  719,  722,  595,  724,  718,  690,  411,
      726,  732,  694,  764,  771,    0,  759,  764,  765,  767,
      772,  773,  801,  800,  808,  805,  809,  813,  835,  847,
      841,  842,  848,  850,  876,  877,  892,  884,  893,  911,
      906,  920,  933,  936,  935,  969,  982,  721,  685,  491,
      965,  951,  573,  941,  536,  130,  723,  591,  756,  625,
      974,  516,  683,  646,  962,  902,  988,  989,  621,  735,

      612,  987, 1003, 1007, 1023, 1000, 1009, 1017, 1025, 1039,
     1024, 1051, 1052, 1074, 1069, 1076, 1068, 1088, 1094, 1120,
     1096, 1114, 1116, 1132, 1136, 1150, 1118, 1158, 1144, 1156,
     1192,  568,  193, 1032,  867,  824, 1065, 1196, 1045, 1113,
      930, 1174, 1184, 1182,  990, 1200, 1206, 1202, 1216, 1186,
     1212, 1208, 1213, 1125,  562,  560, 1211, 1234, 1235, 1236,
     1238, 1260, 1274, 1275, 1280, 1287, 1278, 1300, 1315, 1312,
     1316, 1320, 1332, 1329, 1348, 1361, 1362, 1388, 1366, 1344,
     1386, 1261, 1364, 1276, 1239, 1376, 1406, 1089,  532,  530,
     1401, 1414, 1385, 1416, 1430,  528,  524, 1422, 1413, 1425,

     1428, 1352, 1427, 1432, 1448, 1440, 1441, 1460, 1473, 1474,
     1469, 1482, 1476, 1489, 1506, 1518, 1511, 1525, 1561, 1531,
     1533, 1545, 1560, 1567, 1583, 1584, 1596, 1601, 1637,  523,
      522, 1441, 1612, 1499, 1505, 1585, 1609, 1621, 1514, 1625,
     1622, 1628, 1632, 1637, 1562, 1633,  514, 1654, 1638, 1437,
     1672, 1660, 1673, 1653, 1667, 1670, 1675, 1682, 1694, 1707,
     1695, 1708, 1714, 1710, 1727, 1732, 1746, 1751, 1750, 1759,
     1764, 1779, 1787, 1792, 1788, 1824, 1806, 1681, 1815, 1833,
     1559, 1811,  508, 1778,  485, 1761, 1837, 1841, 1816, 1848,
     1735, 1850, 1854, 1851, 1843, 1855, 1858, 1860, 1854, 1868,

     1886, 1882, 1887, 1890, 1902, 1895, 1915, 1919, 1938, 1937,
     1934, 1951, 1973, 1974, 1956, 1986, 1988, 2006, 2003, 1881,
      484, 2014, 1597, 1913, 1918,  459, 1969,  413, 2023,  375,
     1974,  368, 2032, 1991, 2038, 2037,  366, 2033,  346, 2031,
     2029, 2048, 2053, 2065, 2070, 2071, 2073, 2078, 2085, 2090,
     2108, 2107, 2110, 2113, 2115, 2127, 2122, 2142, 2147, 2147,
     2067, 2161, 2166, 2063, 1724, 1658, 2167,  337, 2171, 2168,
     2172, 2174, 2180, 2164, 2184, 2165, 2199, 2208, 2192, 2216,
     2222, 2228, 2225, 2248, 2250, 2257, 2273, 2256, 2253,  301,
     1874, 2274, 2275, 2222,  299, 2264, 2278, 2294, 2298, 2302,

     2301, 2317, 2324, 2339, 2342, 2340, 2336, 2364, 2369, 2295,
     2338, 2366, 2392, 2193, 2022, 2378, 2299, 2393, 2387,  291,
     2388, 2400, 2404, 2382, 2420, 2433, 2419, 2438, 2446, 2426,
     2458, 2461, 2466, 2474, 2475,  290, 2490, 2498, 2506, 2500,
     2420, 2502, 2511, 2495, 2515, 2527,  289, 2521, 2525, 2510,
     2517, 2526, 2540, 2544, 2539, 2562, 2556, 2569, 2582, 2584,
     2576, 2598, 2604, 2607, 2528, 2580, 2622, 2623, 2618,  283,
      281, 2638, 2635,  280,  279, 2636, 2653, 2652, 2665, 2649,
     2658, 2678, 2687, 2690, 2693, 2692, 2694, 2710, 2713, 2718,
     2717, 2722, 2405, 2728,  257, 2726, 2729, 2742, 2734, 2761,

     2764, 2766, 2762, 2790, 2744, 2650, 2789,  242,  239, 2793,
     2786, 2798, 2800, 2804, 2801, 2813, 2830,  173,  150, 2827,
     2840, 2838, 2838, 2839, 2842, 2856, 2871,  141, 2867,  139,
     2865, 2874, 2868,  124, 2880, 2937,  124, 2930, 2933
    } ;

static yyconst flex_int16_t yy_def[640] =
    {   0,
      636,    1,    1,    1,  636,    5,  636,  636,  636,  636,
      636,  636,  637,  636,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  636,  638,
      638,  638,  638,  638,  639,  638,  639,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
      636,  636,  636,   53,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      638,  638,  638,  638,  638,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,  636,  636,  636,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  638,  638,  638,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,  636,  636,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,

      637,  637,  637,  638,  638,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,

      637,  637,  637,  637,  637,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,  637,  637,  637,
      637,  637,  637,  637,  637,   37,   37,   37,   37,   37,

       37,   37,   37,  637,  637,  637,  637,  637,  637,  637,
       37,   37,   37,   37,   37,   37,   37,  637,  637,  637,
      637,  637,   37,   37,   37,   37,   37,  637,  637,  637,
       37,   37,   37,  637,   37,    0,  636,  636,  636
    } ;

static yyconst flex_int16_t yy_nxt[2992] =
    {   0,
        8,    9,   10,    9,    8,   11,   12,   13,   13,   13,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   16,
       16,   22,   23,   24,   16,   16,   16,   25,   26,   27,
       16,   28,   16,   16,   15,   17,   18,   19,   20,   21,
       16,   16,   22,   23,   24,   16,   16,   16,   25,   26,
       27,   16,   28,   16,   30,    9,   31,   32,   30,   33,
       34,   35,   35,   35,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   38,   38,   44,   45,   46,   38,   38,
       38,   47,   48,   49,   38,   50,   38,   38,   37,   39,
       40,   41,   42,   43,   38,   38,   44,   45,   46,   38,

       38,   38,   47,   48,   49,   38,   50,   38,   51,   52,
       52,   52,   52,   53,   53,   53,   53,   54,   55,   55,
       55,   55,  636,  636,  636,  636,   56,  636,  636,  636,
      636,  636,  636,   59,   57,   70,  636,   67,   61,  239,
      240,   60,  636,   87,   58,  636,   69,  636,   66,   68,
       73,  636,   80,   87,   59,   57,  636,   70,   67,   61,
      636,   79,   60,  636,   87,   58,  636,   69,  636,   66,
       68,   73,  636,   80,   87,   62,  132,  118,   71,  636,
      123,  636,   79,  138,   63,   84,   84,   84,   84,   64,
       72,   65,   53,   53,   53,   53,   62,  132,  118,  636,

       71,  123,  282,  115,  138,   63,   84,   84,   84,   84,
       64,   72,   65,  636,   82,   83,   83,   83,   83,   87,
       90,   92,   87,   87,  115,   87,   74,  636,   91,   87,
      104,   75,   87,   87,   76,   87,   97,   77,  124,   78,
       87,   90,   92,   87,   87,  636,   87,   74,  636,   91,
       87,  104,   75,   87,   87,   76,   87,   97,   77,  124,
       78,   81,   81,  636,   81,   81,   81,   85,   86,   86,
       86,   86,   81,   81,   81,  636,   81,   81,   81,   81,
      636,   98,   87,   87,   81,  636,  636,  636,  100,  636,
      180,   88,   87,   99,  101,  636,  636,  636,   87,  126,

       87,   89,   98,   87,   87,  636,  111,  636,   87,  100,
       87,  180,   88,   87,   99,  636,  101,  636,  102,   87,
      126,   87,   89,   93,   87,  125,   87,  111,   87,   87,
      103,   87,   94,  129,   87,  110,   87,   95,   87,   96,
      102,  636,  636,  636,   93,   87,  125,   87,  636,   87,
      636,  103,  636,   94,  129,   87,  110,   87,   95,   87,
       96,   87,  105,  116,  117,  131,  119,  106,  120,  130,
      107,   87,  636,  108,  636,  109,   54,  112,  112,  112,
      112,  636,   87,  105,  116,  117,  131,  119,  106,  120,
      130,  107,   87,  636,  108,  636,  109,   53,   53,   53,

       53,   54,   55,   55,   55,   55,  113,  114,  636,  121,
      127,  114,  128,  636,  122,  636,  636,  636,  636,  636,
      636,  636,  134,  636,  133,  136,  200,  113,  114,  636,
      121,  127,  114,  128,  636,  122,  137,  139,  140,   87,
      135,  182,  141,  134,  636,  133,  136,  200,  142,   87,
      143,   85,  144,  144,  144,  144,  636,  137,  139,  140,
       87,  186,  182,  141,  189,  636,  636,   87,  155,  142,
       87,   87,  143,   84,   84,   84,   84,  147,   87,  636,
      148,  149,  145,  146,   87,  189,  150,  146,   87,  155,
      636,  636,   87,  192,   87,  156,   87,  636,  147,   87,

      178,  148,  149,  145,  146,   87,   87,  150,  146,   84,
       84,   84,   84,  636,  636,   87,  156,   87,  145,  146,
      636,  178,  636,  146,  233,  246,  247,   87,  636,  636,
      636,   87,  179,  636,  636,  151,  636,  152,  636,  145,
      146,   87,  636,  183,  146,   85,   86,   86,   86,   86,
       87,  157,   87,  179,  153,   87,  151,   87,  152,  154,
       87,  636,   87,   87,  183,   87,  636,   87,  636,  238,
      158,   87,  157,   87,  636,  153,   87,  181,   87,  636,
      154,   87,   87,   87,   87,  159,   87,  160,   87,  161,
       87,  158,   87,   87,   87,   87,  236,  636,  181,  162,

       87,  636,   87,   87,   87,   87,  159,  163,  160,  197,
      161,   87,   87,   87,   87,  164,   87,  236,  636,  166,
      162,   87,   87,   87,  242,   87,   87,  636,  163,  165,
      197,  636,   87,   87,   87,   87,  164,  167,   87,  168,
      166,   87,  169,   87,   87,  636,   87,   87,   87,  170,
      165,   87,  636,   87,  171,   87,   87,   87,  244,   87,
      168,   87,   87,  169,  184,   87,   87,  172,   87,   87,
      170,   87,   87,  173,   87,  171,   87,  175,   87,  248,
      636,  174,   87,   87,   87,  184,  636,   87,  172,  636,
      185,  636,   87,   87,  173,   87,  636,   87,  636,  175,

      636,  187,  174,  636,   87,   87,   54,  112,  112,  112,
      112,  185,  176,  176,   87,  177,  177,  177,  177,  636,
      636,  636,  187,  636,  636,  636,  203,  636,  636,  636,
      636,  191,  636,  193,  188,  194,  195,  196,  636,  190,
      198,  636,  201,  241,  199,  636,  232,  203,  202,  636,
      636,  636,  191,   29,  193,  188,  194,  195,  196,   29,
      190,  198,  636,  201,  241,  199,  636,  232,  253,  202,
       85,  144,  144,  144,  144,  204,  204,   87,  205,  205,
      205,  205,   87,   87,  243,   87,  206,   87,  208,  207,
       87,   87,   87,   87,  209,   87,  636,  636,   87,  210,

       87,   87,  636,   87,   87,  243,   87,  206,   87,  208,
      207,   87,   87,   87,   87,  209,   87,  211,   87,   87,
      210,   87,   87,   87,  213,  212,   87,   87,   87,   87,
      636,   87,  636,   87,  215,  636,   87,   87,  211,   87,
       87,   87,  214,  636,   87,  213,  212,   87,   87,   87,
       87,  285,   87,   87,   87,  215,  216,   87,   87,   87,
       87,  217,   87,   87,  219,   87,   87,  218,   87,   87,
       87,  636,  285,  636,   87,   87,   87,  216,   87,  636,
       87,   87,  217,  220,   87,  219,   87,   87,  218,   87,
       87,   87,  221,  222,   87,   87,   87,   87,  225,   87,

      284,  636,   87,  636,   87,   87,  223,  224,  636,  226,
       87,   87,   87,  221,  222,   87,   87,  636,  636,  225,
       87,   87,  250,   87,   87,   87,   87,  223,  224,   87,
      226,   87,   87,   87,   87,  228,  636,  227,   87,   87,
      636,   87,   87,  250,  291,   87,  636,  636,   87,  229,
       87,   87,  230,   87,   87,   87,  228,  636,  227,   87,
       87,   87,  237,   87,   87,  291,  235,  231,  636,   87,
      229,  636,   87,  230,   87,   87,  177,  177,  177,  177,
      636,  234,   87,  237,   87,   87,  249,  235,  231,  177,
      177,  177,  177,  636,  636,  636,  636,  636,  636,  114,

      245,  636,  234,  114,  636,  252,  636,  249,  251,  636,
      636,  255,  256,  254,  205,  205,  205,  205,   87,  636,
      114,  245,  636,  295,  114,  257,  252,   87,   87,  251,
      205,  205,  205,  205,  254,   87,  636,   87,  636,   87,
      146,  259,   87,   87,  146,   87,  257,  261,   87,   87,
      258,  636,   87,   87,  260,  283,   87,   87,   87,  636,
      289,  146,  259,   87,   87,  146,   87,   87,  261,   87,
       87,  636,  262,   87,   87,  260,  283,  286,   87,   87,
       87,  289,  636,  264,  265,  263,   87,   87,   87,  266,
       87,   87,   87,  262,   87,  636,  268,   87,  636,  286,

       87,   87,   87,  636,   87,  336,   87,   87,   87,  267,
      266,  636,   87,   87,   87,   87,   87,  268,   87,  636,
      270,  269,   87,   87,   87,   87,  336,   87,  290,  271,
      272,  636,   87,   87,   87,   87,   87,   87,   87,  636,
      274,  270,   87,   87,   87,   87,   87,  273,   87,  290,
       87,  636,  275,   87,   87,   87,  276,   87,  305,   87,
       87,  274,   87,   87,   87,   87,  277,   87,   87,   87,
      636,   87,   87,  275,   87,   87,   87,  276,   87,  636,
      636,   87,  279,   87,   87,   87,   87,  277,  636,   87,
      636,  278,  636,   87,  636,   87,  292,   87,  636,   87,

      280,  281,  636,  279,  293,   87,  636,   87,  636,  294,
       87,  287,  636,  300,  636,  296,  298,  292,  636,  636,
       87,  297,  636,  302,  301,  293,  288,  303,  304,   87,
      294,   87,  287,  636,  300,  636,  296,  298,  636,   87,
      299,   87,  297,  306,  302,  636,  301,  288,  303,  304,
       87,  636,   87,   87,   87,  636,   87,  636,  307,  333,
       87,  299,   87,   87,   87,  309,   87,  636,  636,  308,
      636,  636,  310,   87,   87,   87,  330,   87,   87,  307,
      333,  636,  636,   87,   87,   87,  309,   87,   87,  311,
      313,  332,   87,   87,  310,  314,   87,  330,   87,   87,

      316,  315,   87,   87,  312,   87,   87,  636,   87,   87,
      311,  313,  332,   87,   87,   87,  314,   87,   87,   87,
      317,  316,  315,   87,   87,  312,   87,   87,   87,   87,
       87,  320,  636,   87,   87,  321,   87,  636,   87,   87,
       87,  317,  318,   87,   87,  319,  322,   87,   87,   87,
       87,   87,  320,  323,   87,   87,  321,   87,  636,   87,
       87,   87,   87,  318,   87,   87,   87,  322,   87,   87,
      636,   87,   87,  325,  323,  324,   87,  326,   87,   87,
       87,   87,  636,   87,   87,  348,  636,   87,  636,   87,
       87,  636,  331,   87,   87,  325,  324,   87,  326,  329,

       87,   87,  327,  328,   87,   87,   87,  636,  334,  339,
       87,   87,  636,  331,   87,   87,   87,  636,  335,  636,
      636,  337,  636,  327,  328,   87,  338,   87,  636,  334,
      339,  636,  340,  636,  636,   87,  636,   87,  636,  345,
      335,  636,  337,  636,  341,  342,  344,  636,  338,  347,
      346,  349,  350,  340,  636,  354,  343,  636,   87,   87,
      345,  378,  351,  352,  395,  341,  342,  344,   87,  355,
      347,  346,  349,  350,  353,  356,  354,  343,   87,   87,
       87,  359,  378,  351,  352,  395,  636,   87,   87,   87,
      355,   87,   87,  357,   87,  353,  356,   87,  360,   87,

       87,   87,   87,  359,   87,  636,  358,   87,   87,   87,
       87,  636,   87,   87,  357,   87,  636,   87,   87,  360,
      636,   87,   87,   87,   87,   87,  361,  358,   87,   87,
      362,   87,  380,  381,   87,  363,   87,  385,   87,   87,
      636,  364,  636,   87,  636,   87,   87,  361,  636,   87,
       87,   87,  362,   87,  381,   87,  363,   87,  385,   87,
       87,   87,  364,   87,   87,  636,  636,   87,  636,  368,
       87,  423,   87,   87,   87,  365,  366,  391,   87,   87,
       87,  636,   87,  636,   87,   87,  369,  367,   87,   87,
      368,  636,  370,  423,   87,   87,  365,  366,  391,   87,

       87,   87,   87,  636,  371,  382,   87,  369,  367,   87,
       87,   87,   87,  370,   87,  636,   87,  372,  636,   87,
      373,  374,   87,   87,   87,  371,  382,  636,  636,   87,
      462,  636,   87,   87,  636,   87,  379,  383,  636,  636,
       87,  373,  374,  636,  636,   87,  387,  636,  388,  384,
       87,  375,  376,  386,  392,   87,  389,  379,  383,  636,
      636,  390,  394,  377,  636,   87,  636,  387,  393,  388,
      384,   87,  375,  376,  386,  392,   87,  389,  636,  636,
      397,   87,  390,  394,  377,   87,   87,  636,   87,  393,
      399,  492,   87,   87,  636,   87,  396,  398,   87,  400,

       87,  397,   87,   87,  636,  636,   87,  636,  420,   87,
       87,  399,   87,   87,   87,  401,   87,  396,  398,   87,
      400,   87,  402,  404,   87,   87,   87,  403,   87,  420,
      636,   87,   87,   87,   87,   87,  405,  406,  407,  636,
      491,  636,   87,  402,  404,   87,   87,   87,  403,   87,
       87,  408,  409,   87,  636,   87,   87,  405,  406,  407,
       87,  491,  432,   87,   87,  412,   87,  636,   87,   87,
      410,   87,  408,  409,   87,  411,   87,   87,   87,   87,
      413,   87,   87,  432,  636,   87,  412,   87,  426,   87,
       87,  410,   87,  414,  427,   87,  411,   87,   87,   87,

       87,  413,  636,   87,  425,   87,   87,   87,   87,  426,
       87,  415,  417,   87,  414,   87,   87,  636,   87,  416,
       87,  636,  636,  636,   87,  425,   87,   87,   87,  424,
      419,   87,  415,  417,   87,  636,   87,   87,  421,  636,
      416,   87,   87,  636,  418,   87,  430,  636,  422,  636,
      424,  419,   87,  429,  636,   87,  636,  636,  428,  421,
      636,  636,  433,   87,  636,  418,  636,  430,  436,  422,
      438,  636,   87,   87,  431,  429,  437,  435,  434,  428,
      636,  440,   87,  636,  433,  636,   87,  636,  514,  436,
      439,  441,  438,   87,  443,  431,   87,  437,  435,  434,

       87,  442,  440,   87,   87,  444,  460,   87,   87,  514,
       87,  439,  441,   87,   87,   87,  443,   87,   87,  636,
       87,   87,  442,   87,  636,   87,  444,  460,  445,   87,
       87,   87,  463,   87,   87,   87,   87,   87,  464,   87,
      448,   87,  446,   87,   87,  636,  636,   87,  447,  445,
      449,   87,   87,  463,   87,   87,   87,  636,   87,  464,
      451,  448,   87,  446,   87,   87,   87,  450,   87,   87,
      636,  636,  449,   87,   87,  636,   87,   87,  452,   87,
      636,  451,  455,   87,   87,  453,   87,   87,  450,  467,
       87,   87,   87,  636,  636,   87,  465,  636,  454,  452,

       87,   87,   87,  455,   87,   87,   87,  453,  636,  457,
      467,  456,   87,   87,   87,  469,   87,  465,  458,  454,
      636,   87,   87,   87,   87,   87,  461,   87,  636,  636,
      457,   87,  456,  459,   87,   87,  469,   87,  636,  636,
      458,  466,   87,  636,  636,   87,  543,   87,  461,   87,
      636,  472,   87,  470,  459,   87,  473,   87,  471,   87,
      474,  636,  466,  636,  468,  636,   87,  543,   87,  636,
       87,   87,  472,  636,  470,  636,   87,  473,   87,  471,
       87,   87,  474,   87,  476,  468,  475,   87,   87,   87,
      477,   87,   87,   87,  490,  487,   87,   87,   87,   87,

      478,   87,   87,  479,   87,  476,   87,  636,   87,   87,
       87,  477,   87,   87,   87,  490,  487,   87,   87,   87,
       87,  478,   87,  480,  479,   87,   87,   87,   87,   87,
      483,   87,  636,   87,   87,   87,   87,  482,   87,   87,
       87,   87,  481,   87,  480,   87,   87,   87,  484,   87,
       87,  483,   87,  636,   87,   87,   87,   87,  482,   87,
      485,   87,   87,  481,   87,   87,   87,  636,  486,  484,
       87,   87,  636,  636,  636,   87,   87,  636,  636,  636,
      636,  485,   87,   87,  496,  636,   87,  636,  488,  486,
      636,   87,  499,  501,  489,  495,   87,  494,   87,  636,

      493,  498,   87,   87,   87,  636,  496,  497,   87,  488,
       87,  500,   87,  499,  501,  489,  495,   87,  494,   87,
       87,  542,  498,   87,  503,  504,   87,   87,  636,   87,
      502,   87,  500,   87,   87,  636,   87,  519,   87,  636,
       87,   87,  542,   87,   87,  503,   87,   87,   87,  505,
       87,  502,  507,   87,  506,   87,   87,   87,  519,  636,
      508,   87,  636,  636,   87,   87,   87,   87,   87,  510,
      636,   87,  512,  507,   87,  506,   87,   87,   87,  636,
      636,  636,  508,  509,  636,  511,  513,   87,  515,   87,
      636,  510,  521,  512,  636,  636,  520,   87,  636,   87,

      516,  636,  517,  518,  522,  636,  523,  511,  636,  515,
      524,  636,   87,  521,  636,  545,   87,  520,  525,   87,
       87,  516,   87,  517,  518,  522,   87,  536,  523,   87,
       87,  636,  524,   87,  526,   87,  545,   87,  527,  525,
       87,   87,   87,   87,  636,   87,  636,   87,  536,  636,
       87,   87,   87,  528,   87,  532,   87,   87,   87,  527,
       87,  636,  636,   87,   87,  529,   87,   87,   87,  530,
      531,  537,  636,   87,  528,   87,  532,  636,   87,   87,
      538,   87,   87,  534,  636,   87,  529,   87,   87,   87,
      530,  531,   87,  636,  636,  535,  533,   87,  636,  636,

       87,  538,  544,   87,  534,  636,  636,  636,   87,  539,
       87,  636,  548,   87,  547,  551,  535,  533,   87,  540,
      541,   87,   87,  544,  549,  546,  636,  636,  609,  636,
      539,   87,   87,  548,  552,  547,  550,   87,   87,  636,
      540,  541,  559,   87,   87,  549,  546,  556,   87,  609,
      553,   87,  568,   87,   87,  552,   87,  550,   87,   87,
      554,  555,  557,  559,   87,   87,   87,  636,  556,   87,
      558,  553,   87,  568,   87,   87,   87,   87,  636,   87,
      636,  554,  555,  557,   87,   87,   87,   87,  561,   87,
      560,  558,   87,   87,   87,   87,  636,   87,  562,  563,

       87,  636,   87,   87,  636,   87,  636,   87,  636,  561,
       87,  560,  636,   87,   87,   87,  567,  636,  564,  562,
      563,  636,  569,   87,   87,  571,  565,  636,   87,  572,
      566,  636,  570,  636,  636,   87,  636,  567,   87,  564,
      636,  636,  574,  569,   87,  576,  571,  565,  589,   87,
      572,  566,  573,  570,  577,  575,   87,   87,   87,   87,
      579,  636,   87,  574,  578,   87,  576,   87,   87,  589,
      636,  580,   87,  573,   87,  577,  575,  582,   87,   87,
       87,  579,  581,   87,   87,  578,  636,   87,   87,   87,
       87,  636,  580,   87,   87,   87,  584,   87,  582,  583,

       87,   87,   87,  581,   87,   87,  590,  636,   87,  585,
       87,   87,   87,  636,  636,   87,   87,  584,   87,  586,
      583,   87,   87,   87,  636,   87,   87,  590,  636,  636,
      585,   87,   87,   87,  587,  636,  591,   87,  636,  588,
      586,  636,  593,   87,  636,  636,  636,   87,  592,  636,
      636,  595,  636,   87,   87,  587,  636,  591,  636,  636,
      588,  636,  620,  593,   87,  636,  594,   87,  596,  592,
       87,   87,  595,  597,  600,   87,   87,   87,  598,  599,
       87,   87,  601,   87,  620,   87,   87,  594,   87,  596,
      636,   87,   87,   87,  597,  600,   87,   87,   87,  598,

      599,   87,   87,  601,   87,   87,   87,   87,   87,  603,
       87,   87,   87,  636,   87,   87,  636,   87,  602,  636,
       87,   87,   87,  636,  636,  636,   87,   87,  636,   87,
      603,   87,   87,   87,  636,  604,   87,  605,  608,  602,
      606,   87,   87,   87,   87,  607,  636,   87,  610,  636,
      636,  611,   87,  612,   87,  636,  604,   87,  605,  608,
       87,  606,  614,  636,  613,   87,  607,  619,   87,  610,
       87,  636,  611,   87,  612,   87,  636,  615,   87,   87,
       87,   87,   87,  614,   87,  613,  617,  616,  619,   87,
       87,   87,   87,  636,   87,  636,  636,  636,  615,  636,

       87,   87,  623,   87,   87,   87,  618,  617,  616,  621,
       87,   87,  625,   87,   87,   87,   87,  622,   87,   87,
      636,  624,   87,  623,  626,   87,   87,  618,   87,   87,
      621,   87,   87,  636,  625,   87,  636,   87,  622,   87,
       87,   87,  624,   87,  636,  626,  636,   87,   87,   87,
       87,  636,   87,   87,  627,  628,   87,   87,   87,  636,
       87,  630,   87,  636,  629,  636,   87,   87,  636,   87,
      631,  636,  636,  636,   87,  627,  628,   87,   87,   87,
      632,   87,  630,   87,   87,  629,   87,   87,   87,   87,
      634,  631,   87,   87,  633,   87,   87,  635,   87,   87,

      636,  632,   87,  636,   87,   87,  636,   87,   87,  636,
       87,  634,  636,   87,   87,  633,  636,   87,  635,   87,
       87,  636,  636,   87,  636,  636,  636,  636,  636,   87,
       81,  636,   81,   87,  636,   87,    7,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636

    } ;

static yyconst flex_int16_t yy_chk[2992] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,   11,   11,
       11,   11,   11,   12,   12,   12,   12,   13,   13,   13,
       13,   13,   15,   17,   18,   20,  637,   21,   22,   23,
      634,   25,   28,   17,   15,   23,  186,   21,   18,  186,
      186,   17,   27,   38,   15,  630,   22,  628,   20,   21,
       25,   70,   28,   38,   17,   15,  619,   23,   21,   18,
       75,   27,   17,   59,   38,   15,   19,   22,   62,   20,
       21,   25,   24,   28,   38,   19,   70,   59,   24,  618,
       62,   57,   27,   75,   19,   34,   34,   34,   34,   19,
       24,   19,   51,   51,   51,   51,   19,   70,   59,  233,

       24,   62,  233,   57,   75,   19,   82,   82,   82,   82,
       19,   24,   19,   26,   33,   33,   33,   33,   33,   40,
       39,   40,   39,   47,   57,   42,   26,   63,   39,   40,
       47,   26,   39,   47,   26,   42,   42,   26,   63,   26,
       40,   39,   40,   39,   47,  609,   42,   26,  608,   39,
       40,   47,   26,   39,   47,   26,   42,   42,   26,   63,
       26,   35,   35,  595,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   37,   37,  118,   37,   37,   37,   37,
       65,   43,   44,   43,   37,  575,  574,  571,   44,  570,
      118,   37,   44,   43,   45,  547,  536,  520,   50,   65,

       45,   37,   43,   44,   43,  495,   50,  490,   50,   44,
       45,  118,   37,   44,   43,   67,   45,   64,   46,   50,
       65,   45,   37,   41,   46,   64,   41,   50,   49,   50,
       46,   45,   41,   67,   46,   49,   41,   41,   49,   41,
       46,   69,   58,  468,   41,   46,   64,   41,   68,   49,
       60,   46,  439,   41,   67,   46,   49,   41,   41,   49,
       41,   48,   48,   58,   58,   69,   60,   48,   60,   68,
       48,   48,  437,   48,  432,   48,   52,   52,   52,   52,
       52,  430,   48,   48,   58,   58,   69,   60,   48,   60,
       68,   48,   48,   61,   48,   66,   48,   53,   53,   53,

       53,   55,   55,   55,   55,   55,   53,   53,   71,   61,
       66,   53,   66,   72,   61,   73,   74,  140,   76,  428,
       77,  120,   72,   78,   71,   73,  140,   53,   53,   79,
       61,   66,   53,   66,  125,   61,   74,   76,   77,   87,
       72,  120,   78,   72,   80,   71,   73,  140,   79,   87,
       80,   83,   83,   83,   83,   83,  128,   74,   76,   77,
       87,  125,  120,   78,  128,  426,  132,   88,   93,   79,
       87,   89,   80,   84,   84,   84,   84,   88,   93,  115,
       89,   89,   84,   84,   90,  128,   90,   84,   88,   93,
      421,  385,   89,  132,   90,   94,   94,  180,   88,   93,

      115,   89,   89,   84,   84,   90,   94,   90,   84,   85,
       85,   85,   85,  116,  383,   90,   94,   94,   85,   85,
      347,  115,  192,   85,  180,  192,  192,   94,  331,  330,
      297,   91,  116,  121,  296,   91,  290,   91,  289,   85,
       85,   91,  185,  121,   85,   86,   86,   86,   86,   86,
       92,   95,   91,  116,   92,   95,   91,   86,   91,   92,
       92,  119,   91,   96,  121,   95,  256,   86,  255,  185,
       96,   92,   95,   96,  232,   92,   95,  119,   86,  183,
       92,   92,   97,   98,   96,   97,   95,   97,   86,   98,
       99,   96,   97,   98,   96,  100,  183,  188,  119,   99,

       99,  136,  101,   97,   98,  100,   97,  100,   97,  136,
       98,   99,  101,   97,   98,  101,  100,  183,  201,  103,
       99,   99,  103,  101,  188,  102,  100,  199,  100,  102,
      136,  190,  103,  101,  105,  102,  101,  103,  106,  104,
      103,  104,  105,  103,  105,  122,  102,  107,  106,  106,
      102,  104,  194,  103,  107,  105,  102,  107,  190,  106,
      104,  108,  104,  105,  122,  105,  109,  108,  107,  106,
      106,  108,  104,  109,  110,  107,  109,  111,  107,  194,
      123,  110,  108,  111,  110,  122,  126,  109,  108,  193,
      123,  179,  108,  111,  109,  110,  139,  109,  129,  111,

      143,  126,  110,  124,  111,  110,  112,  112,  112,  112,
      112,  123,  113,  113,  111,  113,  113,  113,  113,  127,
      130,  131,  126,  133,  138,  134,  143,  178,  135,  187,
      137,  131,  141,  133,  127,  134,  135,  135,  142,  130,
      137,  200,  141,  187,  138,  117,  178,  143,  142,   56,
       16,    7,  131,    4,  133,  127,  134,  135,  135,    3,
      130,  137,  189,  141,  187,  138,    0,  178,  200,  142,
      144,  144,  144,  144,  144,  145,  145,  147,  145,  145,
      145,  145,  148,  149,  189,  150,  147,  147,  150,  148,
      151,  152,  148,  149,  151,  150,    0,    0,  147,  152,

      151,  152,    0,  148,  149,  189,  150,  147,  147,  150,
      148,  151,  152,  148,  149,  151,  150,  153,  154,  153,
      152,  151,  152,  156,  155,  154,  155,  157,  154,  153,
      236,  158,    0,  156,  158,    0,  155,  157,  153,  154,
      153,  158,  157,    0,  156,  155,  154,  155,  157,  154,
      153,  236,  158,  159,  156,  158,  159,  155,  157,  161,
      162,  160,  158,  159,  163,  160,  163,  162,  164,  161,
      162,    0,  236,  235,  159,  160,  163,  159,  164,    0,
      161,  162,  160,  164,  159,  163,  160,  163,  162,  164,
      161,  162,  165,  166,  165,  166,  160,  163,  168,  164,

      235,    0,  168,    0,  165,  166,  167,  167,  196,  169,
      167,  169,  168,  165,  166,  165,  166,    0,    0,  168,
      167,  169,  196,  168,  171,  165,  166,  167,  167,  170,
      169,  167,  169,  168,  171,  172,  241,  170,  172,  170,
        0,  167,  169,  196,  241,  171,    0,  184,  172,  173,
      170,  173,  174,  175,  174,  171,  172,  182,  170,  172,
      170,  173,  184,  175,  174,  241,  182,  175,  195,  172,
      173,  181,  173,  174,  175,  174,  176,  176,  176,  176,
      191,  181,  173,  184,  175,  174,  195,  182,  175,  177,
      177,  177,  177,  202,  197,  198,  245,    0,    0,  177,

      191,    0,  181,  177,    0,  198,    0,  195,  197,  203,
        0,  203,  203,  202,  204,  204,  204,  204,  206,    0,
      177,  191,    0,  245,  177,  206,  198,  207,  206,  197,
      205,  205,  205,  205,  202,  208,    0,  207,  234,  206,
      205,  209,  211,  209,  205,  208,  206,  211,  207,  206,
      208,  239,  211,  209,  210,  234,  208,  210,  207,    0,
      239,  205,  209,  211,  209,  205,  208,  210,  211,  212,
      213,  237,  212,  211,  209,  210,  234,  237,  210,  212,
      213,  239,    0,  214,  214,  213,  217,  215,  210,  215,
      212,  213,  214,  212,  216,  288,  217,  215,    0,  237,

      212,  213,  214,    0,  216,  288,  218,  217,  215,  216,
      215,    0,  219,  214,  221,  216,  218,  217,  215,  240,
      219,  218,  219,  214,  221,  216,  288,  218,  240,  220,
      220,  254,  222,  219,  223,  221,  227,  218,  220,    0,
      223,  219,  222,  219,  223,  221,  227,  222,  220,  240,
      224,    0,  224,  222,  225,  223,  225,  227,  254,  220,
      224,  223,  229,  222,  225,  223,  226,  227,  226,  220,
        0,  224,  229,  224,  230,  225,  228,  225,  226,    0,
      242,  224,  230,  229,  230,  225,  228,  226,  244,  226,
      243,  228,  250,  229,    0,  230,  242,  228,    0,  226,

      231,  231,  238,  230,  243,  230,  246,  228,  248,  244,
      231,  238,  247,  250,  252,  246,  248,  242,  251,  253,
      231,  247,  249,  252,  251,  243,  238,  253,  253,  257,
      244,  231,  238,    0,  250,    0,  246,  248,    0,  257,
      249,  231,  247,  258,  252,  285,  251,  238,  253,  253,
      257,    0,  258,  259,  260,    0,  261,    0,  259,  285,
      257,  249,  258,  259,  260,  261,  261,  282,    0,  260,
        0,    0,  262,  258,  259,  260,  282,  261,  262,  259,
      285,    0,  284,  258,  259,  260,  261,  261,  262,  263,
      264,  284,  263,  264,  262,  265,  267,  282,  265,  262,

      267,  266,  263,  264,  263,  266,  267,    0,  265,  262,
      263,  264,  284,  263,  264,  266,  265,  267,  268,  265,
      268,  267,  266,  263,  264,  263,  266,  267,  268,  265,
      270,  271,    0,  269,  271,  272,  266,    0,  272,  268,
      270,  268,  269,  269,  271,  270,  273,  274,  272,  268,
      273,  270,  271,  274,  269,  271,  272,  274,  302,  272,
      273,  270,  280,  269,  269,  271,  275,  273,  274,  272,
      283,  273,  280,  276,  274,  275,  275,  277,  274,  276,
      277,  273,  286,  280,  279,  302,    0,  275,    0,  276,
      277,  293,  283,  280,  279,  276,  275,  275,  277,  279,

      276,  277,  278,  278,  281,  279,  278,  291,  286,  293,
      276,  277,  287,  283,  281,  279,  278,    0,  287,  299,
      292,  291,  294,  278,  278,  281,  292,  278,  298,  286,
      293,  300,  294,  303,  301,  281,  295,  278,  304,  299,
      287,    0,  291,  350,  295,  295,  298,  332,  292,  301,
      300,  303,  304,  294,  305,  306,  295,    0,  306,  307,
      299,  332,  305,  305,  350,  295,  295,  298,  306,  307,
      301,  300,  303,  304,  305,  308,  306,  295,  308,  306,
      307,  311,  332,  305,  305,  350,    0,  311,  308,  306,
      307,  309,  310,  309,  313,  305,  308,  311,  312,  308,

      312,  309,  310,  311,  313,  334,  310,  314,  311,  308,
      312,  335,  309,  310,  309,  313,    0,  314,  311,  312,
      339,  312,  309,  310,  315,  313,  315,  310,  314,  317,
      316,  312,  334,  335,  315,  317,  316,  339,  314,  317,
        0,  318,    0,  318,    0,  315,  316,  315,    0,  320,
      317,  321,  316,  318,  335,  315,  317,  316,  339,  320,
      317,  321,  318,  322,  318,  381,    0,  316,  345,  322,
      320,  381,  321,  322,  318,  319,  319,  345,  323,  319,
      320,    0,  321,    0,  322,  324,  323,  319,  323,  319,
      322,  336,  324,  381,  322,  324,  319,  319,  345,  323,

      319,  325,  326,  423,  325,  336,  324,  323,  319,  323,
      319,  325,  326,  324,  327,  337,  324,  326,  333,  328,
      327,  328,  325,  326,  327,  325,  336,  338,  341,  328,
      423,  340,  325,  326,  342,  327,  333,  337,  343,  346,
      328,  327,  328,  344,  349,  327,  341,    0,  342,  338,
      328,  329,  329,  340,  346,  329,  343,  333,  337,    0,
      348,  344,  349,  329,  466,  329,  352,  341,  348,  342,
      338,  354,  329,  329,  340,  346,  329,  343,  351,  353,
      352,  354,  344,  349,  329,  355,  329,  378,  356,  348,
      356,  466,  354,  357,    0,  355,  351,  353,  356,  357,

      358,  352,  354,  357,    0,    0,  355,    0,  378,  356,
      358,  356,  359,  361,  357,  358,  355,  351,  353,  356,
      357,  358,  359,  361,  357,  360,  362,  360,  364,  378,
      465,  358,  363,  359,  361,  360,  362,  363,  364,    0,
      465,  391,  363,  359,  361,  365,  360,  362,  360,  364,
      366,  365,  366,  363,    0,  365,  360,  362,  363,  364,
      366,  465,  391,  363,  367,  369,  365,  386,  369,  368,
      367,  366,  365,  366,  367,  368,  365,  370,  369,  368,
      370,  366,  371,  391,  384,  367,  369,  370,  386,  369,
      368,  367,  371,  372,  386,  367,  368,  372,  370,  369,

      368,  370,    0,  371,  384,  373,  375,  372,  370,  386,
      374,  373,  375,  371,  372,  373,  375,  382,  372,  374,
      374,  379,  389,    0,  377,  384,  373,  375,  372,  382,
      377,  374,  373,  375,  377,    0,  373,  375,  379,  380,
      374,  374,  376,  387,  376,  377,  389,  388,  380,  395,
      382,  377,  376,  388,  390,  377,  392,  394,  387,  379,
      393,  396,  392,  376,  397,  376,  398,  389,  395,  380,
      397,    0,  399,  376,  390,  388,  396,  394,  393,  387,
      491,  399,  399,    0,  392,    0,  400,  420,  491,  395,
      398,  400,  397,  399,  402,  390,  400,  396,  394,  393,

      402,  401,  399,  399,  401,  403,  420,  400,  404,  491,
      402,  398,  400,  406,  401,  403,  402,  400,  404,  424,
      405,  402,  401,  406,  425,  401,  403,  420,  405,  404,
      405,  402,  424,  407,  406,  401,  403,  408,  425,  404,
      408,  405,  407,  407,  406,    0,    0,  408,  407,  405,
      409,  405,  411,  424,  407,  410,  409,    0,  408,  425,
      411,  408,  411,  407,  407,  410,  409,  410,  408,  412,
        0,    0,  409,  411,  415,  427,  410,  409,  412,  412,
      431,  411,  415,  411,  415,  413,  410,  409,  410,  431,
      412,  413,  414,    0,    0,  415,  427,  434,  414,  412,

      412,  413,  414,  415,  416,  415,  417,  413,    0,  417,
      431,  416,  413,  414,  416,  434,  417,  427,  418,  414,
      422,  419,  413,  414,  418,  416,  422,  417,  515,  429,
      417,  419,  416,  419,  418,  416,  434,  417,  433,  438,
      418,  429,  419,  436,  435,  418,  515,  441,  422,  440,
        0,  438,  419,  435,  419,  418,  440,  441,  436,  440,
      442,    0,  429,    0,  433,    0,  442,  515,  441,  464,
      440,  443,  438,  461,  435,    0,  442,  440,  441,  436,
      440,  443,  442,  444,  444,  433,  443,  442,  445,  446,
      445,  447,  443,  444,  464,  461,  448,  442,  445,  446,

      447,  447,  443,  449,  444,  444,  448,    0,  450,  445,
      446,  445,  447,  449,  444,  464,  461,  448,  450,  445,
      446,  447,  447,  451,  449,  452,  451,  448,  453,  450,
      455,  454,    0,  455,  449,  452,  451,  454,  453,  450,
      457,  454,  453,  455,  451,  456,  452,  451,  456,  453,
      457,  455,  454,  460,  455,  456,  452,  451,  454,  453,
      458,  457,  454,  453,  455,  459,  456,  462,  460,  456,
      458,  457,  463,  467,  470,  459,  456,  469,  471,    0,
      472,  458,  474,  476,  471,    0,  459,    0,  462,  460,
        0,  458,  474,  476,  463,  470,  459,  469,  473,  514,

      467,  473,  475,  474,  476,    0,  471,  472,  473,  462,
      479,  475,  475,  474,  476,  463,  470,  477,  469,  473,
      479,  514,  473,  475,  478,  479,  478,  477,  494,  473,
      477,  479,  475,  475,  480,    0,  478,  494,  477,    0,
      481,  479,  514,  483,  480,  478,  482,  478,  477,  480,
      481,  477,  483,  483,  482,  480,  482,  478,  494,  489,
      484,  481,  488,  486,  483,  480,  484,  482,  485,  486,
      496,  481,  488,  483,  483,  482,  484,  482,  485,  487,
      492,  493,  484,  485,  497,  487,  489,  484,  492,  485,
        0,  486,  497,  488,    0,    0,  496,  484,    0,  485,

      492,  510,  493,  493,  497,  517,  498,  487,    0,  492,
      499,    0,  498,  497,    0,  517,  499,  496,  500,  501,
      500,  492,  498,  493,  493,  497,  499,  510,  498,  501,
      500,    0,  499,  498,  501,  502,  517,  499,  503,  500,
      501,  500,  503,  498,  511,  502,    0,  499,  510,    0,
      501,  500,  503,  504,  507,  506,  502,  504,  506,  503,
      505,    0,    0,  503,  507,  504,  502,  504,  506,  505,
      505,  511,  512,  503,  504,  507,  506,    0,  504,  506,
      512,  505,  508,  509,  516,  507,  504,  509,  504,  506,
      505,  505,  508,  519,  521,  509,  508,  509,  513,  518,

      524,  512,  516,  508,  509,    0,  522,    0,  509,  513,
      524,  593,  521,  508,  519,  524,  509,  508,  509,  513,
      513,  524,  523,  516,  522,  518,  541,    0,  593,    0,
      513,  524,  523,  521,  525,  519,  523,  527,  525,    0,
      513,  513,  530,  523,  530,  522,  518,  527,  525,  593,
      526,  526,  541,  523,  530,  525,  528,  523,  527,  525,
      526,  526,  528,  530,  529,  530,  528,    0,  527,  525,
      529,  526,  526,  541,  529,  530,  531,  528,    0,  532,
        0,  526,  526,  528,  533,  529,  531,  528,  532,  532,
      531,  529,  534,  535,  533,  529,  537,  531,  534,  535,

      532,  544,  534,  535,  538,  533,  540,  531,  542,  532,
      532,  531,  539,  534,  535,  533,  540,  543,  537,  534,
      535,  545,  542,  534,  535,  544,  538,  548,  550,  545,
      539,  549,  543,  546,  565,  551,    0,  540,  550,  537,
        0,    0,  548,  542,  552,  551,  544,  538,  565,  550,
      545,  539,  546,  543,  552,  549,  551,  555,  553,  550,
      554,    0,  554,  548,  553,  552,  551,  555,  553,  565,
        0,  555,  554,  546,  557,  552,  549,  557,  555,  553,
      556,  554,  556,  554,  557,  553,  566,  558,  555,  553,
      556,    0,  555,  554,  561,  557,  559,  558,  557,  558,

      559,  556,  560,  556,  561,  557,  566,    0,  558,  560,
      559,  556,  560,  564,    0,  561,  562,  559,  558,  562,
      558,  559,  563,  560,  569,  561,  562,  566,  567,  568,
      560,  559,  563,  560,  563,    0,  567,  562,    0,  564,
      562,  573,  569,  563,  572,    0,    0,  562,  568,    0,
        0,  573,    0,  563,  576,  563,  606,  567,    0,    0,
      564,    0,  606,  569,  576,    0,  572,  580,  576,  568,
      578,  577,  573,  577,  580,  576,  581,  580,  578,  579,
      578,  577,  581,  579,  606,  576,  581,  572,  580,  576,
        0,  578,  577,  579,  577,  580,  582,  581,  580,  578,

      579,  578,  577,  581,  579,  583,  582,  581,  584,  585,
      586,  585,  587,    0,  579,  583,  588,  582,  584,  589,
      586,  585,  587,  591,  590,    0,  583,  582,  592,  584,
      585,  586,  585,  587,  594,  588,  583,  589,  592,  584,
      590,  586,  585,  587,  596,  591,    0,  597,  594,    0,
      605,  596,  599,  597,  596,    0,  588,  597,  589,  592,
      598,  590,  599,    0,  598,  596,  591,  605,  597,  594,
      598,    0,  596,  599,  597,  596,    0,  600,  597,  600,
      603,  598,  601,  599,  602,  598,  602,  601,  605,  600,
      603,  598,  601,    0,  602,  607,  604,    0,  600,  610,

      600,  603,  611,  601,  611,  602,  604,  602,  601,  607,
      600,  603,  613,  601,  611,  602,  612,  610,  613,  615,
        0,  612,  614,  611,  614,  611,  612,  604,  613,  615,
      607,  616,  614,  620,  613,  611,    0,  612,  610,  613,
      615,  616,  612,  614,  622,  614,  621,  612,  617,  613,
      615,    0,  616,  614,  617,  620,  623,  624,  617,    0,
      625,  622,  616,    0,  621,    0,  623,  624,    0,  617,
      625,    0,    0,  629,  626,  617,  620,  623,  624,  617,
      626,  625,  622,  631,  626,  621,  633,  623,  624,  627,
      629,  625,  632,  631,  627,  626,  633,  632,  635,  627,

        0,  626,  632,    0,  631,  626,    0,  633,  635,    0,
      627,  629,    0,  632,  631,  627,    0,  633,  632,  635,
      627,    0,    0,  632,    0,    0,    0,    0,    0,  635,
      638,    0,  638,  639,    0,  639,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636

    } ;

static yyconst flex_int16_t yy_rule_linenum[55] =
    {   0,
      166,  171,  175,  180,  187,  192,  197,  199,  204,  209,
      214,  216,  218,  220,  225,  230,  235,  240,  245,  249,
      253,  257,  261,  265,  270,  274,  278,  282,  286,  290,
      294,  298,  304,  309,  313,  316,  320,  325,  329,  333,
      337,  342,  346,  350,  354,  360,  371,  378,  381,  385,
      389,  395,  400,  404
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "..\\..\\tsplib-parser\\parser\\tsplib.l"
/* $Id: scanner.ll 44 2008-10-23 09:03:19Z tb $ -*- mode: c++ -*- */
/** \file scanner.ll Define the TSPLIB Flex lexical scanner */
#line 5 "..\\..\\tsplib-parser\\parser\\tsplib.l"

#include <string>
#include <iostream>

#include "tsplib_lexer.h"

/* import the parser's token type into a local typedef */
typedef TSPLIB::Parser::token token;
typedef TSPLIB::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H


/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "TSPLIBFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* float exponent */
/* literal keywords */
/* normal TSP types, as defined in TSPLIB */
/* generalized TSP extension, according to the rules specified in:
 * http://www.cs.rhul.ac.uk/home/zvero/GTSPLIB/ and
 * http://www.cs.nott.ac.uk/~dxk/gtsp.html
 */
/*
 * Other attributes
 */
/*
 * Edge weight types
 */
/*
 * Edge weight formats
 */
/*
 * Edge data formats
 */
/*
 * Node coordinates types
 */
/*
 * Display data types
 */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 152 "..\\..\\tsplib-parser\\parser\\tsplib.l"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 1420 "..\\..\\tsplib-parser\\parser/tsplib_lexer.cpp"

#define INITIAL 0
#define EXPECT_REST_OF_LINE_STRING 1
#define REST_OF_LINE_STRING 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 155 "..\\..\\tsplib-parser\\parser\\tsplib.l"



 /* code to place at the beginning of yylex() */

    // reset location
    yylloc->step();


 /*** BEGIN TSPLIB - Change the TSPLIB lexer rules below ***/

#line 1591 "..\\..\\tsplib-parser\\parser/tsplib_lexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 637 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 636 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 55 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 55 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 56 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 166 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->integerVal = atoi(yytext);
    return token::INTEGER;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 171 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->doubleVal = atof(yytext);
    return token::DOUBLE;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 175 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    BEGIN(REST_OF_LINE_STRING);
    return token::KEY_VALUE_SEPARATOR;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 180 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    #ifdef FLEX_SCANNER_DEBUG
        std::cout << "sep" << std::endl;
    #endif
    return token::KEY_VALUE_SEPARATOR;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 187 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    BEGIN(EXPECT_REST_OF_LINE_STRING);
    return token::NAME;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 192 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    BEGIN(EXPECT_REST_OF_LINE_STRING);
    return token::COMMENT;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 197 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{ return token::NODE_COORD_TYPE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 199 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->nodeCoordType = TSP::NODE_COORD_TYPE::TWO_D;
    return token::NODE_COORD_TYPE_LITERAL;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 204 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->nodeCoordType = TSP::NODE_COORD_TYPE::THREE_D;
    return token::NODE_COORD_TYPE_LITERAL;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 209 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->nodeCoordType = TSP::NODE_COORD_TYPE::NONE;
    return token::NODE_COORD_TYPE_LITERAL;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 214 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{ return token::NODE_COORD_SECTION; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 216 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{ return token::DIMENSION; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 218 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{ return token::TYPE; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 220 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->tspType = TSP::TYPE::TOUR;
    return token::TSPTYPE;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 225 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->tspType = TSP::TYPE::TSP;
    return token::TSPTYPE;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 230 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->tspType = TSP::TYPE::ATSP;
    return token::TSPTYPE;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 235 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->tspType = TSP::TYPE::GTSP;
    return token::TSPTYPE;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 240 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->tspType = TSP::TYPE::AGTSP;
    return token::TSPTYPE;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 245 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    return token::GTSP_SETS;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 249 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    return token::GTSP_SET_SECTION;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 253 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    return token::EDGE_WEIGHT_TYPE;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 257 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    return token::EDGE_WEIGHT_SECTION;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 261 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::EUC_2D;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 265 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::EUC_3D;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 270 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::MAX_2D;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 274 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::MAX_3D;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 278 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::CEIL_2D;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 282 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::GEO;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 286 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::ATT;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 290 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::XRAY1;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 294 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::XRAY2;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 298 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::SPECIAL;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 304 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::EXPLICIT;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 309 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    return token::EDGE_WEIGHT_FORMAT;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 313 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    return token::EDGE_DATA_SECTION;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 316 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->edgeWeightFormat = TSP::EDGE_WEIGHT_FORMAT::FUNCTION;
    return token::EDGE_WEIGHT_FORMAT_LITERAL;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 320 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->edgeWeightFormat = TSP::EDGE_WEIGHT_FORMAT::FULL_MATRIX;
    return token::EDGE_WEIGHT_FORMAT_LITERAL;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 325 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->edgeWeightFormat = TSP::EDGE_WEIGHT_FORMAT::UPPER_ROW;
    return token::EDGE_WEIGHT_FORMAT_LITERAL;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 329 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->edgeWeightFormat = TSP::EDGE_WEIGHT_FORMAT::LOWER_ROW;
    return token::EDGE_WEIGHT_FORMAT_LITERAL;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 333 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->edgeWeightFormat = TSP::EDGE_WEIGHT_FORMAT::UPPER_COL;
    return token::EDGE_WEIGHT_FORMAT_LITERAL;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 337 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->edgeWeightFormat = TSP::EDGE_WEIGHT_FORMAT::LOWER_COL;
    return token::EDGE_WEIGHT_FORMAT_LITERAL;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 342 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->edgeWeightFormat = TSP::EDGE_WEIGHT_FORMAT::UPPER_DIAG_ROW;
    return token::EDGE_WEIGHT_FORMAT_LITERAL;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 346 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->edgeWeightFormat = TSP::EDGE_WEIGHT_FORMAT::LOWER_DIAG_ROW;
    return token::EDGE_WEIGHT_FORMAT_LITERAL;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 350 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->edgeWeightFormat = TSP::EDGE_WEIGHT_FORMAT::UPPER_DIAG_COL;
    return token::EDGE_WEIGHT_FORMAT_LITERAL;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 354 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->edgeWeightFormat = TSP::EDGE_WEIGHT_FORMAT::LOWER_DIAG_COL;
    return token::EDGE_WEIGHT_FORMAT_LITERAL;
}
	YY_BREAK
/* read the rest of the line as a single string */
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 360 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    #ifdef FLEX_SCANNER_DEBUG
        std::cout << "rest_of_line: " << *(yylval->stringVal) << std::endl;
    #endif

    BEGIN(INITIAL);
    return token::STRING;
}
	YY_BREAK
/* gobble up white-spaces */
case 47:
YY_RULE_SETUP
#line 371 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
   #ifdef FLEX_SCANNER_DEBUG
    std::cout << "ws" << yytext << std::endl;
   #endif
   yylloc->step();
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 378 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    return token::DISPLAY_DATA_TYPE;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 381 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->displayDataType = TSP::DISPLAY_DATA_TYPE::COORD_DISPLAY;
    return token::DISPLAY_DATA_TYPE_LITERAL;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 385 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->displayDataType = TSP::DISPLAY_DATA_TYPE::TWOD_DISPLAY;
    return token::DISPLAY_DATA_TYPE_LITERAL;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 389 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->displayDataType = TSP::DISPLAY_DATA_TYPE::NO_DISPLAY;
    return token::DISPLAY_DATA_TYPE_LITERAL;
}
	YY_BREAK
/* gobble up end-of-lines */
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 395 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylloc->lines(yyleng); yylloc->step();
    return token::EOL;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 400 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    return token::END;
}
	YY_BREAK
/* pass all other characters to bison */
case 54:
YY_RULE_SETUP
#line 404 "..\\..\\tsplib-parser\\parser\\tsplib.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    #ifdef FLEX_SCANNER_DEBUG
       std::cout << "UNMATCHED INPUT! " << yytext << std::endl;
    #endif
    std::stringstream err;
    err << "syntax error, unmatched input token: " << *yylval->stringVal;
    driver.error(err.str());
    return token::UNMATCHED_TOKEN;
}
	YY_BREAK
/*** END TSPLIB - Change the TSPLIB lexer rules above ***/
case 55:
YY_RULE_SETUP
#line 417 "..\\..\\tsplib-parser\\parser\\tsplib.l"
ECHO;
	YY_BREAK
#line 2139 "..\\..\\tsplib-parser\\parser/tsplib_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(EXPECT_REST_OF_LINE_STRING):
case YY_STATE_EOF(REST_OF_LINE_STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	TSPLIBfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	TSPLIBfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					TSPLIBrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) TSPLIBrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 637 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 637 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 636);

		return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) TSPLIBalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) TSPLIBalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		TSPLIBfree((void *) b->yy_ch_buf  );

	TSPLIBfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)TSPLIBalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)TSPLIBrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) TSPLIBalloc(new_size  );

		else
			(yy_start_stack) = (int *) TSPLIBrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *TSPLIBalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *TSPLIBrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void TSPLIBfree (void * ptr )
{
	free( (char *) ptr );	/* see TSPLIBrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 416 "..\\..\\tsplib-parser\\parser\\tsplib.l"



namespace TSPLIB {

Scanner::Scanner(std::istream* in,
         std::ostream* out)
    : TSPLIBFlexLexer(in, out)
{
}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

}

/* This implementation of TSPLIBFlexLexer::yylex() is required to fill the
 * vtable of the class TSPLIBFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int TSPLIBFlexLexer::yylex()
{
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int TSPLIBFlexLexer::yywrap()
{
    return 1;
}

