#line 2 "parser/tsplib_lexer.cpp"

#line 4 "parser/tsplib_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer TSPLIBFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *TSPLIBalloc (yy_size_t  );
void *TSPLIBrealloc (void *,yy_size_t  );
void TSPLIBfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 34
#define YY_END_OF_BUFFER 35
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[393] =
    {   0,
       33,   33,   33,   33,   33,   33,   35,   34,   30,   31,
       34,   34,    1,    4,   33,   33,   33,   33,   33,   33,
       33,   33,   33,    3,   34,   31,   30,   34,   34,    1,
        4,   33,   33,   33,   33,   33,   33,   33,   33,   33,
        0,    1,    2,    2,    1,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   29,   29,    1,    2,    2,    1,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,    1,    0,    2,
       33,   33,   33,   33,   33,   32,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   15,   33,   33,    1,   29,
        2,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   15,   29,   29,    0,
        2,   33,   16,   33,   33,   33,   33,   33,   33,   17,
        5,   33,   33,   33,   14,   33,   13,   29,    2,   29,
       16,   29,   29,   29,   29,   29,   29,   17,    5,   29,
       29,   29,   14,   29,   13,   18,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   18,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   33,   33,   33,   33,   23,   24,   33,   33,   33,

       33,   33,   33,   33,   29,   29,   29,   29,   23,   24,
       29,   29,   29,   29,   29,   29,   29,    6,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,    6,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   33,
       33,   33,   25,   33,   33,   33,   33,   33,   33,   29,
       29,   29,   25,   29,   29,   29,   29,   29,   29,   12,
       33,   33,   33,   19,   33,   33,   10,   33,   33,   12,
       29,   29,   29,   19,   29,   29,   10,   29,   29,   33,
       33,   33,   33,   33,   33,   33,   29,   29,   29,   29,
       29,   29,   29,   33,   33,   28,   33,   33,   33,    8,

       29,   29,   28,   29,   29,   29,    8,   33,   33,   33,
       33,   33,   33,   29,   29,   29,   29,   29,   29,   33,
       33,   33,   33,   33,   33,   33,    9,   29,   29,   29,
       29,   29,   29,   29,    9,   33,   33,   33,   33,   33,
       33,   33,   29,   29,   29,   29,   29,   29,   29,   33,
       33,   33,   33,   33,   33,    7,   29,   29,   29,   29,
       29,   29,    7,   33,   33,   33,   21,   20,   33,   29,
       29,   29,   21,   20,   29,   27,   33,   33,   33,   27,
       29,   29,   29,   26,   33,   11,   26,   29,   11,   22,
       22,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    5,    1,    6,    7,    1,    8,    8,    9,
       10,    8,    8,    8,    8,    8,    8,   11,    1,    1,
        1,    1,    1,    1,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   13,   13,   21,   22,   23,   24,   25,
       13,   26,   27,   28,   29,   13,   30,   31,   32,   13,
        1,    1,    1,    1,   33,    1,   34,   13,   35,   36,

       37,   38,   39,   40,   41,   13,   13,   42,   43,   44,
       45,   46,   13,   47,   48,   49,   50,   13,   51,   52,
       53,   13,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[54] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    3,    3,    3,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[396] =
    {   0,
        0,    0,  419,  413,   53,    0,  406, 1825, 1825, 1825,
      100,  103,  107, 1825,  111,  398,  112,  113,  154,  114,
      116,  118,  200, 1825,    0,    0,    0,  138,  118,  253,
        0,  264,  123,  131,  138,  299,  153,  156,  340,  372,
      188,  201,  418,    0,  205,  394,  193,  146,  179,  209,
      210,  218,  232,  265,  266,  267,  269,  211,  271,  270,
      273,  276,  279,    0,  228,  324,  453,  488,  524,  267,
      308,  327,  328,  364,  344,  370,  345,  404,  426,  418,
      464,  520,  461,  500,  518,  523,  552,  332,  432, 1825,
      274,  426,  388,  213,  272,  363,  160,  452,  457,  476,

      469,  477,  346,  508,  371,  358,  504,  558,  574,  580,
        0,  548,  574,  582,  587,  590,  589,  604,  591,  623,
      617,  630,  631,  636,  658,  655,  659,  673,  687,  406,
      708,  609,  354,  645,  514,  277,  125,  686,  336,  677,
      330,  704,  689,  683,  317,  707,  298,  722,  734,  710,
      729,  736,  730,  749,  752,  766,  769,  771,  772,  791,
      788,  807,  804,  808,  810,  289,  716,  786,  824,  685,
      756,  509,  571,  835,  838,  841,  843,  854,  846,  848,
      854,  889,  852,  890,  892,  872,  895,  918,  924,  932,
      931,  902,  776,  295,  862,  286,  282,  917,  949,  948,

      909,  958,  712,  955,  954,  958,  976,  959,  973,  974,
      991, 1008, 1000, 1017, 1020, 1025, 1026,  236,  982, 1024,
     1014, 1044, 1053, 1054, 1056,  848, 1063, 1061, 1058, 1060,
     1061, 1076, 1090, 1093, 1094, 1095, 1109, 1132, 1102,  891,
      983, 1131,  234, 1088, 1129, 1146, 1147, 1145, 1150, 1145,
     1168, 1160, 1164, 1180, 1183, 1186, 1210, 1202, 1216,  227,
      796, 1217, 1159,  226, 1216, 1233,  216, 1232, 1238, 1232,
     1234, 1257, 1250, 1254, 1274, 1272, 1266, 1286, 1301, 1259,
     1281, 1305, 1148,  844, 1291, 1317, 1300, 1314, 1315, 1340,
     1327, 1333, 1356, 1355, 1083,  184, 1371, 1363, 1366,  182,

     1370, 1375, 1382, 1399, 1398, 1400, 1402, 1387, 1416, 1422,
     1445, 1288, 1428, 1439, 1472, 1438, 1442, 1465, 1457, 1452,
     1462, 1487, 1466, 1488, 1495, 1506,  181, 1494, 1499, 1518,
     1517, 1519, 1536, 1544, 1514, 1554, 1533, 1570, 1566, 1558,
     1569, 1571, 1561, 1568, 1595, 1586, 1598, 1601, 1620, 1617,
     1599, 1621, 1638, 1632, 1626,  168, 1640, 1638, 1633, 1655,
     1668, 1660, 1635, 1683, 1686, 1688,  161,  133, 1690, 1682,
     1704, 1695, 1700, 1712, 1724,  131, 1696, 1726, 1718, 1719,
     1728, 1736, 1756,  130, 1759,  124, 1737, 1760, 1752,  117,
     1769, 1825,  119, 1818, 1821

    } ;

static yyconst flex_int16_t yy_def[396] =
    {   0,
      392,    1,    1,    1,  392,    5,  392,  392,  392,  392,
      392,  392,  393,  392,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  392,  394,  394,  394,  394,  394,  395,
      394,  395,   32,   32,   32,   32,   32,   32,   32,   32,
      392,  392,  392,   43,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  394,  394,  394,  394,  394,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,  392,  392,  392,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,

      393,  393,  393,  393,  393,  393,  393,  393,  394,  394,
      394,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,  392,
      392,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  394,  394,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,  393,  393,  393,  393,  393,  393,  393,  393,  393,

      393,  393,  393,  393,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,  393,
      393,  393,  393,  393,  393,  393,   32,   32,   32,   32,
       32,   32,   32,  393,  393,  393,  393,  393,  393,  393,

       32,   32,   32,   32,   32,   32,   32,  393,  393,  393,
      393,  393,  393,   32,   32,   32,   32,   32,   32,  393,
      393,  393,  393,  393,  393,  393,  393,   32,   32,   32,
       32,   32,   32,   32,   32,  393,  393,  393,  393,  393,
      393,  393,   32,   32,   32,   32,   32,   32,   32,  393,
      393,  393,  393,  393,  393,  393,   32,   32,   32,   32,
       32,   32,   32,  393,  393,  393,  393,  393,  393,   32,
       32,   32,   32,   32,   32,  393,  393,  393,  393,   32,
       32,   32,   32,  393,  393,  393,   32,   32,   32,  393,
       32,    0,  392,  392,  392

    } ;

static yyconst flex_int16_t yy_nxt[1879] =
    {   0,
        8,    9,   10,    9,    8,   11,   12,   13,   13,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   16,   16,
       16,   16,   22,   16,   16,   16,   16,   23,   16,   16,
       16,   16,   16,   15,   17,   18,   19,   20,   21,   16,
       16,   16,   16,   22,   16,   16,   16,   16,   23,   16,
       16,   16,   16,   25,    9,   26,   27,   25,   28,   29,
       30,   30,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   33,   33,   33,   33,   39,   33,   33,   33,   33,
       40,   33,   33,   33,   33,   33,   32,   34,   35,   36,
       37,   38,   33,   33,   33,   33,   39,   33,   33,   33,

       33,   40,   33,   33,   33,   33,   41,   42,   42,   42,
       43,   43,   43,   44,   45,   45,   45,  392,  392,  392,
      392,   46,  392,  392,  392,   67,   67,   67,   47,   57,
      392,  392,   50,  170,  171,   49,  392,  392,   48,  392,
       70,   58,   55,   56,   65,   66,   66,   66,   70,   47,
       70,   57,  392,   50,   73,   70,   49,   74,   70,   48,
      392,   70,   58,   55,   56,   70,  392,  392,   51,   70,
       70,   70,   92,   70,  392,   73,   70,   52,   74,   70,
       70,   79,   53,   80,   54,  392,   70,  392,  392,   51,
      392,   70,  137,   92,   70,   43,   43,   43,   52,  392,

       93,   70,   79,   53,   80,   54,  392,   44,   88,   88,
       88,   44,   45,   45,   45,  392,  392,  392,   59,  392,
       91,   93,  392,   60,  392,  102,   61,   95,  135,   62,
       94,   63,  392,  392,   96,   67,   67,   67,  392,   59,
      392,   91,  392,  103,   60,   97,  102,   61,   95,  135,
       62,   94,   63,   64,   64,   96,   64,   64,   64,   68,
       69,   69,   69,   64,   64,   64,   97,   64,   64,   64,
       64,  392,  392,  392,   64,  392,  392,  392,  392,  392,
      392,   71,  392,  392,   70,  392,   99,  136,  392,   98,
      101,   72,  392,  100,   70,  392,  104,  106,  105,  107,

      132,  392,   71,  108,  392,   70,  220,   99,  136,  169,
       98,  101,   72,   75,  100,   70,   70,  104,  106,  105,
      107,  132,   76,  392,  108,   70,   70,   77,  220,   78,
       68,  109,  109,  109,   75,  112,  392,   70,   44,   88,
       88,   88,  392,   76,   70,   70,   70,   70,   77,  114,
       78,   81,  392,  113,   70,   70,  112,   70,  118,  143,
      392,  116,   70,   82,  392,   70,   70,   70,  173,  392,
      114,   70,   70,   81,  113,   70,   70,  392,   70,  118,
      143,   70,  116,   70,   82,  115,  117,   70,   70,   70,
       83,   70,   70,   70,  392,   84,  145,   70,   85,   70,

      392,   86,   70,   87,  392,  392,  115,  117,   70,  134,
       70,   83,   70,  131,  131,  131,   84,  145,   70,   85,
       70,   70,   86,   24,   87,   43,   43,   43,  119,   24,
      134,   70,  392,   89,   90,   70,  130,  130,   90,  131,
      131,  131,   70,   70,  121,   70,  120,  392,  392,  119,
      133,  392,   70,   70,   89,   90,   70,  392,  392,   90,
       67,   67,   67,  392,   70,  121,   70,  120,  110,  111,
      392,  133,  138,  111,   70,  392,  392,  139,   70,  392,
      392,   70,  392,  392,  141,  122,  125,  392,   70,  110,
      111,   70,  142,  138,  111,   67,   67,   67,  139,   70,

      140,  392,   70,  110,  111,  141,  122,  125,  111,   70,
      392,  392,   70,  142,  392,  392,  392,   70,  146,  392,
      392,  140,  198,  144,  110,  111,  392,   70,  126,  111,
       68,   69,   69,   69,  123,   70,  168,   70,   70,  146,
       70,   70,  127,  198,  144,   70,  128,   70,   70,  126,
       70,   70,  124,  392,  392,  123,   70,  168,   70,  392,
      392,   70,   70,  127,  392,   70,   70,  128,   70,   70,
      392,   70,   70,  147,  150,   70,  129,  392,  392,   70,
       68,  109,  109,  109,  148,  148,   70,  149,  149,  149,
       70,   70,  199,  392,  147,  150,   70,  129,  151,   70,

       70,   70,  153,  152,   70,  154,   70,   70,   70,   70,
      392,  156,   70,  199,   70,  392,   70,   70,   70,  151,
       70,   70,   70,  153,  152,   70,  154,   70,   70,   70,
       70,   70,  156,  166,   70,   70,  155,   70,   70,   70,
       70,  158,   70,  157,   70,  159,  160,   70,   70,  161,
       70,  392,   70,   70,  166,   70,  392,   70,   70,  392,
      167,   70,  158,   70,  157,   70,  159,  160,   70,   70,
      161,   70,   70,  162,   70,   70,   70,  392,   70,   70,
      163,  167,   70,  392,   70,   70,   70,  164,  392,  392,
       70,  392,  392,   70,  162,  392,   70,   70,  177,  196,

       70,  163,  165,   70,   70,  172,   70,   70,  164,  174,
      392,   70,  176,  392,   70,  131,  131,  131,  392,  177,
      196,   70,  392,  165,   90,   70,  172,   70,   90,  149,
      149,  149,  392,  176,  179,   70,  175,   70,  192,  178,
      392,  149,  149,  149,  227,   90,   70,   70,   70,   90,
      111,  180,  181,   70,  111,  179,   70,   70,   70,  192,
      183,  184,  392,   70,  392,  392,   70,   70,   70,   70,
      197,  111,  180,  181,   70,  111,   70,   70,   70,   70,
      392,  182,  392,   70,   70,  185,   70,   70,   70,   70,
       70,  197,  392,   70,  392,  219,   70,   70,   70,   70,

       70,  186,  392,  187,   70,   70,  185,   70,   70,   70,
       70,  189,  193,  392,   70,   70,  219,   70,   70,   70,
       70,   70,  190,  188,   70,   70,   70,   70,  280,   70,
      392,   70,  189,  193,   70,   70,   70,   70,  194,   70,
      191,  392,   70,  190,  392,   70,   70,  392,   70,  392,
      392,  201,   70,  195,  392,   70,   70,  203,   70,  194,
      392,  200,  247,   70,  202,   70,  209,  204,  392,   70,
      205,   70,  201,   70,  195,   70,  298,  221,  203,   70,
      206,   70,  200,  247,   70,  202,   70,  209,  204,   70,
       70,  205,   70,  212,   70,  392,   70,  392,  221,   70,

       70,  206,   70,  207,  210,  211,   70,   70,  392,   70,
       70,  392,   70,  260,  212,  392,   70,   70,  208,   70,
       70,  213,   70,  392,  207,  210,  211,   70,   70,  218,
       70,  214,  225,   70,  260,   70,  222,   70,   70,  208,
       70,   70,  213,   70,  217,   70,  216,  215,   70,   70,
      218,   70,  214,  225,  392,  392,   70,  222,   70,   70,
      223,  392,   70,  224,  392,  217,   70,  216,  215,   70,
       70,   70,   70,  392,  232,   70,   70,  230,  228,   70,
       70,  229,  223,  226,  224,   70,   70,  231,  392,  392,
       70,   70,   70,   70,  261,  232,   70,   70,  230,  228,

       70,   70,  229,   70,  226,  240,   70,   70,   70,  231,
      233,   70,   70,  392,   70,  235,  261,   70,   70,  234,
      392,   70,   70,  392,   70,   70,  240,   70,  392,   70,
      392,  233,  392,  242,   70,   70,  235,   70,   70,   70,
      236,  234,   70,   70,   70,  237,   70,   70,   70,  239,
      392,  241,   70,   70,  242,   70,   70,  238,   70,  392,
      392,  236,  392,   70,   70,   70,  237,  392,   70,  392,
      239,  243,  241,   70,   70,   70,  248,   70,   70,  246,
      244,  245,  392,  250,  249,   70,  392,   70,  251,  392,
      392,  392,  243,   70,  392,  252,   70,  248,   70,   70,

      246,  244,  245,   70,  250,  249,   70,   70,   70,  251,
       70,   70,   70,  263,   70,  309,  252,  253,  256,   70,
      254,  255,   70,  257,   70,  259,   70,  392,   70,   70,
      392,   70,   70,   70,  263,  392,   70,  392,  253,  256,
       70,  254,  255,   70,  257,  258,  259,   70,  262,   70,
       70,  392,  392,  392,  392,  264,  392,   70,  392,   70,
      392,  265,   70,  297,  392,  392,  258,  270,  268,  262,
       70,  266,   70,  267,  392,  269,  264,  272,  282,  271,
       70,   70,  392,   70,  297,   70,  392,   70,  270,  268,
      392,   70,  266,   70,  267,   70,  269,   70,  272,  282,

       70,  271,   70,   70,  392,  273,   70,   70,   70,  274,
       70,  276,   70,   70,  392,  275,   70,  392,   70,   70,
      392,   70,  392,  392,   70,  278,  273,   70,   70,   70,
      274,   70,  276,   70,   70,  281,  277,   70,  392,  392,
       70,  279,  283,   70,  392,  392,  278,  284,   70,   70,
       70,   70,  286,  392,   70,  285,  281,  277,   70,   70,
      392,   70,  279,  283,   70,  392,  287,   70,  284,  289,
       70,   70,   70,  286,   70,  288,  285,   70,  392,  392,
       70,   70,   70,   70,   70,  294,  291,  392,   70,   70,
      289,   70,   70,   70,  392,   70,  288,  392,   70,   70,

      290,   70,   70,   70,   70,   70,  294,  291,  295,  292,
       70,  392,   70,   70,   70,  293,  299,   70,   70,  326,
       70,  290,   70,  392,   70,  392,  301,   70,   70,  295,
      292,   70,   70,  392,   70,  296,  293,  299,   70,   70,
      326,  302,   70,  300,   70,  303,  392,  301,   70,   70,
       70,  392,   70,   70,   70,  304,  296,   70,  306,  305,
       70,  392,  302,   70,  300,   70,  303,   70,  392,  392,
      308,   70,  392,   70,  392,   70,  304,  392,   70,  306,
      313,   70,  307,   70,  310,  314,  392,   70,   70,  311,
      312,  308,   70,  392,   70,  392,  392,   70,  392,   70,

      320,  313,   70,  307,   70,  310,  314,  315,   70,   70,
      311,  312,  316,   70,  319,   70,   70,   70,   70,   70,
       70,  320,  392,   70,  317,  318,   70,   70,  392,   70,
       70,  392,  321,  316,  392,  319,   70,   70,   70,  392,
       70,  392,  322,  323,  392,  317,  318,   70,   70,  324,
       70,  392,  328,  321,  327,   70,   70,  333,  392,   70,
      325,  392,  392,  322,  323,  332,   70,  392,  392,   70,
      324,  392,  392,  328,   70,  327,   70,   70,  333,  336,
       70,  325,   70,  335,   70,  337,  332,   70,  329,   70,
       70,  392,   70,  392,  392,   70,  334,  339,  330,  331,

      336,  392,  338,   70,  335,   70,  337,  340,  341,  329,
       70,   70,  392,   70,  392,  392,   70,  334,  339,  330,
      331,  343,  344,  338,  392,  392,   70,  392,  340,  341,
      342,   70,   70,  345,   70,   70,   70,   70,  347,  392,
      392,   70,  343,  344,   70,   70,   70,   70,  346,  348,
      392,  342,   70,   70,  345,   70,   70,   70,  351,  347,
      392,   70,   70,   70,  392,   70,   70,   70,  349,  346,
      348,   70,  392,  350,   70,  392,  392,  392,   70,  351,
      357,  354,   70,  352,   70,   70,  356,  392,   70,  349,
      353,  392,   70,  358,  350,   70,  355,  392,  392,   70,

      392,  357,  354,   70,  352,  392,   70,  356,  359,   70,
      360,  353,   70,   70,  358,   70,   70,  355,   70,  392,
      365,  361,   70,  392,   70,   70,  392,  392,  362,  359,
      392,  360,  392,   70,   70,  363,   70,   70,  392,   70,
      364,  365,  361,   70,  392,  369,   70,   70,  366,  362,
       70,  392,   70,  367,  368,   70,  363,   70,   70,  371,
      372,  364,   70,  370,  392,   70,  369,   70,   70,  366,
      373,   70,   70,   70,  367,  368,   70,   70,   70,  375,
      371,  372,   70,   70,  370,   70,   70,   70,   70,  392,
      374,  373,  392,   70,  392,   70,  392,  377,   70,   70,

      375,  392,  392,   70,  380,  376,   70,  378,   70,   70,
      392,  374,   70,  379,  382,  381,   70,   70,  392,  377,
       70,   70,   70,  384,  392,  380,  376,   70,  378,   70,
       70,   70,  392,   70,  379,  382,   70,  381,   70,   70,
      386,   70,   70,   70,  384,   70,   70,  383,   70,  385,
       70,   70,   70,   70,   70,  387,  392,   70,  392,  388,
       70,  386,   70,   70,   70,  392,   70,   70,  383,   70,
      385,  392,   70,   70,   70,   70,  387,   70,  389,   70,
      388,  390,  391,   70,   70,   70,   70,   70,  392,  392,
       70,  392,  392,  392,   70,  392,   70,  392,   70,  389,

       70,  392,  390,  391,   70,  392,  392,   70,   70,  392,
      392,  392,  392,  392,  392,  392,  392,   70,   64,  392,
       64,   70,  392,   70,    7,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392
    } ;

static yyconst flex_int16_t yy_chk[1879] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,   11,   11,   11,   11,
       12,   12,   12,   13,   13,   13,   13,   15,   17,   18,
       20,  393,   21,  390,   22,   29,   29,   29,   15,   22,
      386,  137,   18,  137,  137,   17,  384,  376,   15,  368,
       33,   22,   20,   21,   28,   28,   28,   28,   34,   15,
       33,   22,   48,   18,   34,   35,   17,   35,   34,   15,
       19,   33,   22,   20,   21,   35,   97,  367,   19,   34,
       37,   33,   48,   38,  356,   34,   35,   19,   35,   34,
       37,   37,   19,   38,   19,   49,   35,  327,  300,   19,
      296,   37,   97,   48,   38,   41,   41,   41,   19,   47,

       49,   37,   37,   19,   38,   19,   23,   42,   42,   42,
       42,   45,   45,   45,   45,   50,   51,   58,   23,   94,
       47,   49,  267,   23,   52,   58,   23,   51,   94,   23,
       50,   23,  264,  260,   52,   65,   65,   65,   53,   23,
      243,   47,  218,   58,   23,   53,   58,   23,   51,   94,
       23,   50,   23,   30,   30,   52,   30,   30,   30,   30,
       30,   30,   30,   30,   32,   32,   53,   32,   32,   32,
       32,   54,   55,   56,   32,   57,   60,   59,   95,   61,
       91,   32,   62,  136,   70,   63,   55,   95,  197,   54,
       57,   32,  196,   56,   70,  166,   59,   61,   60,   62,

       91,  194,   32,   63,  147,   70,  194,   55,   95,  136,
       54,   57,   32,   36,   56,   70,   36,   59,   61,   60,
       62,   91,   36,  145,   63,   71,   36,   36,  194,   36,
       66,   66,   66,   66,   36,   71,  141,   36,   88,   88,
       88,   88,  139,   36,   72,   73,   71,   36,   36,   73,
       36,   39,  103,   72,   72,   73,   71,   39,   77,  103,
      133,   75,   77,   39,  106,   72,   73,   39,  139,   96,
       73,   75,   77,   39,   72,   72,   73,  105,   39,   77,
      103,   74,   75,   77,   39,   74,   76,   76,   39,   40,
       40,   74,   75,   77,   93,   40,  105,   76,   40,   40,

       46,   40,   74,   40,   16,    7,   74,   76,   76,   93,
       40,   40,   74,  130,  130,  130,   40,  105,   76,   40,
       40,   78,   40,    4,   40,   43,   43,   43,   78,    3,
       93,   78,   92,   43,   43,   80,   89,   89,   43,   89,
       89,   89,   78,   79,   80,   80,   79,    0,    0,   78,
       92,    0,   78,   79,   43,   43,   80,    0,   98,   43,
       67,   67,   67,   99,   79,   80,   80,   79,   67,   67,
        0,   92,   98,   67,   79,  101,    0,   99,   83,    0,
        0,   81,  100,  102,  101,   81,   83,    0,   83,   67,
       67,   81,  102,   98,   67,   68,   68,   68,   99,   83,

      100,    0,   81,   68,   68,  101,   81,   83,   68,   83,
      107,    0,   81,  102,  104,  172,    0,   84,  107,    0,
      135,  100,  172,  104,   68,   68,    0,   84,   84,   68,
       69,   69,   69,   69,   82,   85,  135,   82,   84,  107,
       86,   69,   85,  172,  104,   85,   86,   82,   84,   84,
       86,   69,   82,    0,    0,   82,   85,  135,   82,    0,
        0,   86,   69,   85,  108,  112,   85,   86,   82,   87,
        0,   86,   69,  108,  112,  112,   87,  173,    0,   87,
      109,  109,  109,  109,  110,  110,  112,  110,  110,  110,
       87,  113,  173,    0,  108,  112,  112,   87,  113,  114,

       87,  113,  115,  114,  115,  116,  117,  116,  119,  114,
        0,  119,  113,  173,  115,  132,  117,  116,  119,  113,
      114,  118,  113,  115,  114,  115,  116,  117,  116,  119,
      114,  118,  119,  132,  121,  115,  118,  117,  116,  119,
      120,  121,  118,  120,  121,  122,  123,  122,  123,  124,
      120,  134,  118,  124,  132,  121,    0,  122,  123,    0,
      134,  120,  121,  124,  120,  121,  122,  123,  122,  123,
      124,  120,  126,  125,  124,  125,  127,    0,  122,  123,
      126,  134,  126,  140,  124,  125,  127,  128,    0,  144,
      128,  170,  138,  126,  125,  143,  125,  127,  144,  170,

      128,  126,  129,  126,  129,  138,  125,  127,  128,  140,
      142,  128,  143,  146,  129,  131,  131,  131,  203,  144,
      170,  128,  167,  129,  131,  129,  138,  150,  131,  148,
      148,  148,    0,  143,  150,  129,  142,  150,  167,  146,
        0,  149,  149,  149,  203,  131,  151,  153,  150,  131,
      149,  152,  153,  152,  149,  150,  151,  153,  150,  167,
      155,  155,  171,  152,    0,    0,  154,  151,  153,  155,
      171,  149,  152,  153,  152,  149,  154,  151,  153,  155,
        0,  154,  193,  156,  152,  156,  157,  154,  158,  159,
      155,  171,  168,  156,    0,  193,  157,  154,  158,  159,

      155,  157,  261,  158,  156,  161,  156,  157,  160,  158,
      159,  161,  168,    0,  156,  161,  193,  157,  160,  158,
      159,  163,  162,  160,  162,  164,  161,  165,  261,  160,
      169,  163,  161,  168,  162,  164,  161,  165,  169,  160,
      164,  174,  163,  162,  175,  162,  164,  176,  165,  177,
      284,  175,  163,  169,  226,  162,  164,  177,  165,  169,
      178,  174,  226,  179,  176,  180,  183,  178,  195,  183,
      180,  181,  175,  179,  169,  180,  284,  195,  177,  183,
      181,  181,  174,  226,  179,  176,  180,  183,  178,  186,
      183,  180,  181,  186,  179,    0,  180,  240,  195,  186,

      183,  181,  181,  182,  184,  185,  182,  184,  192,  185,
      186,    0,  187,  240,  186,  201,  182,  184,  182,  185,
      186,  187,  187,  198,  182,  184,  185,  182,  184,  192,
      185,  188,  201,  187,  240,  188,  198,  182,  184,  182,
      185,  189,  187,  187,  191,  188,  190,  189,  191,  190,
      192,  189,  188,  201,  200,  199,  188,  198,  191,  190,
      199,  204,  189,  200,  202,  191,  188,  190,  189,  191,
      190,  205,  189,    0,  208,  206,  208,  206,  204,  191,
      190,  205,  199,  202,  200,  206,  208,  207,  219,  241,
      209,  210,  205,  207,  241,  208,  206,  208,  206,  204,

      209,  210,  205,  207,  202,  219,  206,  208,  211,  207,
      211,  209,  210,    0,  207,  213,  241,  213,  211,  212,
      221,  209,  210,    0,  207,  212,  219,  213,    0,  211,
      220,  211,    0,  221,  214,  212,  213,  215,  213,  211,
      214,  212,  216,  217,  214,  215,  212,  215,  213,  217,
      222,  220,  216,  217,  221,  214,  212,  216,  215,  223,
      224,  214,  225,  216,  217,  214,  215,  228,  215,  227,
      217,  222,  220,  216,  217,  229,  227,  230,  231,  225,
      223,  224,    0,  230,  228,  229,    0,  230,  231,  295,
        0,    0,  222,  232,  244,  232,  229,  227,  230,  231,

      225,  223,  224,  232,  230,  228,  229,  233,  230,  231,
      234,  235,  236,  244,  232,  295,  232,  233,  236,  239,
      234,  235,  236,  237,  232,  239,  237,    0,  233,  239,
        0,  234,  235,  236,  244,  245,  237,  242,  233,  236,
      239,  234,  235,  236,  237,  238,  239,  237,  242,  238,
      239,  248,  246,  247,  283,  245,  249,  237,    0,  238,
        0,  245,  250,  283,    0,  263,  238,  250,  248,  242,
      238,  246,  250,  247,    0,  249,  245,  252,  263,  251,
      238,  253,    0,  250,  283,  251,    0,  252,  250,  248,
        0,  253,  246,  250,  247,  251,  249,  254,  252,  263,

      255,  251,  253,  256,    0,  254,  251,  254,  252,  255,
      255,  256,  253,  256,    0,  255,  251,    0,  254,  258,
        0,  255,  265,  262,  256,  258,  254,  257,  254,  258,
      255,  255,  256,  259,  256,  262,  257,  257,  268,  266,
      258,  259,  265,  259,  269,    0,  258,  266,  257,  270,
      258,  271,  269,    0,  259,  268,  262,  257,  257,  270,
        0,  271,  259,  265,  259,  280,  271,  273,  266,  273,
      270,  274,  271,  269,  272,  272,  268,  273,    0,    0,
      270,  274,  271,  277,  272,  280,  276,  281,  273,  276,
      273,  275,  274,  277,  312,  272,  272,  285,  273,  276,

      275,  275,  274,  278,  277,  272,  280,  276,  281,  278,
      276,  282,  275,  278,  277,  279,  285,  287,  279,  312,
      276,  275,  275,  286,  278,    0,  287,  287,  279,  281,
      278,  288,  289,    0,  278,  282,  279,  285,  287,  279,
      312,  288,  289,  286,  291,  289,    0,  287,  287,  279,
      292,    0,  288,  289,  291,  290,  282,  290,  292,  291,
      292,  294,  288,  289,  286,  291,  289,  290,    0,  298,
      294,  292,  299,  293,    0,  291,  290,  297,  290,  292,
      299,  292,  293,  293,  297,  301,    0,  301,  290,  298,
      298,  294,  302,  308,  293,    0,    0,  301,    0,  303,

      308,  299,  302,  293,  293,  297,  301,  302,  301,  303,
      298,  298,  304,  302,  306,  305,  304,  306,  301,  307,
      303,  308,  309,  302,  305,  305,  304,  306,  310,  307,
      303,    0,  309,  304,  313,  306,  305,  304,  306,    0,
      307,    0,  309,  309,    0,  305,  305,  304,  306,  310,
      307,  311,  314,  309,  313,  316,  314,  317,  320,  317,
      311,    0,    0,  309,  309,  316,  314,    0,  321,  317,
      310,    0,  323,  314,  319,  313,  316,  314,  317,  320,
      317,  311,  318,  319,  319,  321,  316,  314,  315,  315,
      317,    0,  318,  322,  324,  319,  318,  323,  315,  315,

      320,  325,  322,  318,  319,  319,  321,  324,  325,  315,
      315,  328,  326,  318,    0,    0,  329,  318,  323,  315,
      315,  328,  329,  322,    0,    0,  329,    0,  324,  325,
      326,  335,  328,  330,  331,  330,  332,  329,  332,  337,
        0,  335,  328,  329,  331,  330,  332,  329,  331,  333,
        0,  326,  335,  333,  330,  331,  330,  332,  337,  332,
      336,  334,  335,  333,  340,  331,  330,  332,  334,  331,
      333,  334,  339,  336,  333,  341,  338,  342,  343,  337,
      343,  340,  334,  338,  333,  344,  342,    0,  343,  334,
      339,    0,  334,  344,  336,  344,  341,    0,    0,  343,

        0,  343,  340,  346,  338,  351,  344,  342,  345,  343,
      346,  339,  345,  346,  344,  347,  344,  341,  348,    0,
      351,  347,  345,  350,  346,  347,    0,  352,  348,  345,
        0,  346,  355,  345,  346,  349,  347,  349,  354,  348,
      350,  351,  347,  345,  353,  355,  347,  349,  352,  348,
      359,    0,  363,  353,  354,  358,  349,  357,  349,  358,
      359,  350,  363,  357,    0,  358,  355,  357,  349,  352,
      360,  359,  360,  363,  353,  354,  358,  362,  357,  362,
      358,  359,  360,  363,  357,  361,  358,  362,  357,  364,
      361,  360,  365,  360,  366,  361,  369,  365,  362,  370,

      362,    0,  377,  360,  370,  364,  361,  366,  362,  370,
        0,  361,  372,  369,  372,  371,  361,  373,    0,  365,
      370,  371,  372,  377,  379,  370,  364,  373,  366,  374,
      370,  371,  378,  372,  369,  372,  380,  371,  373,  374,
      379,  375,  371,  372,  377,  381,  380,  375,  373,  378,
      374,  375,  371,  382,  387,  381,    0,  380,    0,  382,
      374,  379,  375,  382,  387,  385,  381,  380,  375,  389,
      378,    0,  375,  383,  382,  387,  381,  388,  383,  389,
      382,  385,  388,  383,  382,  387,  391,  388,    0,    0,
      389,    0,    0,    0,  383,    0,  391,    0,  388,  383,

      389,    0,  385,  388,  383,    0,    0,  391,  388,    0,
        0,    0,    0,    0,    0,    0,    0,  391,  394,    0,
      394,  395,    0,  395,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392
    } ;

static yyconst flex_int16_t yy_rule_linenum[34] =
    {   0,
      163,  168,  172,  177,  184,  189,  194,  196,  201,  206,
      211,  213,  215,  217,  222,  227,  232,  237,  242,  246,
      250,  254,  258,  262,  266,  271,  275,  278,  284,  295,
      303,  308,  312
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "parser/tsplib.l"
/* $Id: scanner.ll 44 2008-10-23 09:03:19Z tb $ -*- mode: c++ -*- */
/** \file scanner.ll Define the TSPLIB Flex lexical scanner */
#line 5 "parser/tsplib.l"

#include <string>
#include <iostream>

#include "tsplib_lexer.h"

/* import the parser's token type into a local typedef */
typedef TSPLIB::Parser::token token;
typedef TSPLIB::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H


/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "TSPLIBFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* float exponent */
/* literal keywords */
/* normal TSP types, as defined in TSPLIB */
/* generalized TSP extension, according to the rules specified in:
 * http://www.cs.rhul.ac.uk/home/zvero/GTSPLIB/ and
 * http://www.cs.nott.ac.uk/~dxk/gtsp.html
 */
/*
 * Other attributes
 */
/*
 * Edge weight types
 */
/*
 * Edge weight formats
 */
/*
 * Edge data formats
 */
/*
 * Node coordinates types
 */
/*
 * Display data types
 */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 149 "parser/tsplib.l"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 1092 "parser/tsplib_lexer.cpp"

#define INITIAL 0
#define EXPECT_REST_OF_LINE_STRING 1
#define REST_OF_LINE_STRING 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 152 "parser/tsplib.l"



 /* code to place at the beginning of yylex() */

    // reset location
    yylloc->step();


 /*** BEGIN TSPLIB - Change the TSPLIB lexer rules below ***/

#line 1263 "parser/tsplib_lexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 393 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 392 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 34 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 34 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 35 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 163 "parser/tsplib.l"
{
    yylval->integerVal = atoi(yytext);
    return token::INTEGER;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 168 "parser/tsplib.l"
{
    yylval->doubleVal = atof(yytext);
    return token::DOUBLE;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 172 "parser/tsplib.l"
{
    BEGIN(REST_OF_LINE_STRING);
    return token::KEY_VALUE_SEPARATOR;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 177 "parser/tsplib.l"
{
    #ifdef FLEX_SCANNER_DEBUG
        std::cout << "sep" << std::endl;
    #endif
    return token::KEY_VALUE_SEPARATOR;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 184 "parser/tsplib.l"
{
    BEGIN(EXPECT_REST_OF_LINE_STRING);
    return token::NAME;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 189 "parser/tsplib.l"
{
    BEGIN(EXPECT_REST_OF_LINE_STRING);
    return token::COMMENT;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 194 "parser/tsplib.l"
{ return token::NODE_COORD_TYPE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 196 "parser/tsplib.l"
{
    yylval->nodeCoordType = TSP::NODE_COORD_TYPE::TWO_D;
    return token::NODE_COORD_TYPE_LITERAL;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 201 "parser/tsplib.l"
{
    yylval->nodeCoordType = TSP::NODE_COORD_TYPE::THREE_D;
    return token::NODE_COORD_TYPE_LITERAL;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 206 "parser/tsplib.l"
{
    yylval->nodeCoordType = TSP::NODE_COORD_TYPE::NONE;
    return token::NODE_COORD_TYPE_LITERAL;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 211 "parser/tsplib.l"
{ return token::NODE_COORD_SECTION; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 213 "parser/tsplib.l"
{ return token::DIMENSION; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 215 "parser/tsplib.l"
{ return token::TYPE; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 217 "parser/tsplib.l"
{
    yylval->tspType = TSP::TYPE::TOUR;
    return token::TSPTYPE;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 222 "parser/tsplib.l"
{
    yylval->tspType = TSP::TYPE::TSP;
    return token::TSPTYPE;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 227 "parser/tsplib.l"
{
    yylval->tspType = TSP::TYPE::ATSP;
    return token::TSPTYPE;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 232 "parser/tsplib.l"
{
    yylval->tspType = TSP::TYPE::GTSP;
    return token::TSPTYPE;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 237 "parser/tsplib.l"
{
    yylval->tspType = TSP::TYPE::AGTSP;
    return token::TSPTYPE;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 242 "parser/tsplib.l"
{
    return token::GTSP_SETS;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 246 "parser/tsplib.l"
{
    return token::GTSP_SET_SECTION;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 250 "parser/tsplib.l"
{
    return token::EDGE_WEIGHT_TYPE;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 254 "parser/tsplib.l"
{
    return token::EDGE_WEIGHT_SECTION;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 258 "parser/tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::EUC_2D;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 262 "parser/tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::EUC_3D;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 266 "parser/tsplib.l"
{
    yylval->edgeWeightType = TSP::EDGE_WEIGHT_TYPE::EXPLICIT;
    return token::EDGE_WEIGHT_TYPE_LITERAL;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 271 "parser/tsplib.l"
{
    return token::EDGE_WEIGHT_FORMAT;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 275 "parser/tsplib.l"
{
    return token::EDGE_DATA_SECTION;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 278 "parser/tsplib.l"
{
    yylval->edgeWeightFormat = TSP::EDGE_WEIGHT_FORMAT::FULL_MATRIX;
    return token::EDGE_WEIGHT_FORMAT_LITERAL;
}
	YY_BREAK
/* read the rest of the line as a single string */
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 284 "parser/tsplib.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    #ifdef FLEX_SCANNER_DEBUG
        std::cout << "rest_of_line: " << *(yylval->stringVal) << std::endl;
    #endif

    BEGIN(INITIAL);
    return token::STRING;
}
	YY_BREAK
/* gobble up white-spaces */
case 30:
YY_RULE_SETUP
#line 295 "parser/tsplib.l"
{
   #ifdef FLEX_SCANNER_DEBUG
    std::cout << "ws" << yytext << std::endl;
   #endif
   yylloc->step();
}
	YY_BREAK
/* gobble up end-of-lines */
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 303 "parser/tsplib.l"
{
    yylloc->lines(yyleng); yylloc->step();
    return token::EOL;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 308 "parser/tsplib.l"
{
    return token::END;
}
	YY_BREAK
/* pass all other characters to bison */
case 33:
YY_RULE_SETUP
#line 312 "parser/tsplib.l"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    #ifdef FLEX_SCANNER_DEBUG
       std::cout << "UNMATCHED INPUT! " << yytext << std::endl;
    #endif
    std::stringstream err;
    err << "syntax error, unmatched input token: " << *yylval->stringVal;
    driver.error(err.str());
    return token::UNMATCHED_TOKEN;
}
	YY_BREAK
/*** END TSPLIB - Change the TSPLIB lexer rules above ***/
case 34:
YY_RULE_SETUP
#line 325 "parser/tsplib.l"
ECHO;
	YY_BREAK
#line 1644 "parser/tsplib_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(EXPECT_REST_OF_LINE_STRING):
case YY_STATE_EOF(REST_OF_LINE_STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	TSPLIBfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	TSPLIBfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					TSPLIBrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) TSPLIBrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 393 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 393 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 392);

		return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) TSPLIBalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) TSPLIBalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		TSPLIBfree((void *) b->yy_ch_buf  );

	TSPLIBfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)TSPLIBalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)TSPLIBrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) TSPLIBalloc(new_size  );

		else
			(yy_start_stack) = (int *) TSPLIBrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *TSPLIBalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *TSPLIBrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void TSPLIBfree (void * ptr )
{
	free( (char *) ptr );	/* see TSPLIBrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 324 "parser/tsplib.l"



namespace TSPLIB {

Scanner::Scanner(std::istream* in,
         std::ostream* out)
    : TSPLIBFlexLexer(in, out)
{
}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

}

/* This implementation of TSPLIBFlexLexer::yylex() is required to fill the
 * vtable of the class TSPLIBFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int TSPLIBFlexLexer::yylex()
{
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int TSPLIBFlexLexer::yywrap()
{
    return 1;
}

